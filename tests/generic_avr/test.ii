# 1 "test.c"
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/tests/generic_avr//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "test.c"
# 17 "test.c"
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 424 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 427 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 428 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 429 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 425 "/usr/include/features.h" 2 3 4
# 448 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 449 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4


# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 216 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 130 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 131 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 36 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 37 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 38 "/usr/include/stdio.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/libio.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 20 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 22 "/usr/include/x86_64-linux-gnu/bits/_G_config.h" 2 3 4




typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 36 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 54 "/usr/include/x86_64-linux-gnu/bits/libio.h" 2 3 4
# 149 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;




typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 177 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 245 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 293 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
  __off64_t _offset;







  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;

  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 337 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 433 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 462 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 524 "/usr/include/x86_64-linux-gnu/bits/libio.h" 3 4
}
# 42 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 57 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef _G_fpos_t fpos_t;




typedef _G_fpos64_t fpos64_t;
# 131 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 132 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();







extern FILE *tmpfile (void) __attribute__ ((__warn_unused_result__));
# 169 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) __attribute__ ((__warn_unused_result__));



extern char *tmpnam (char *__s) throw () __attribute__ ((__warn_unused_result__));




extern char *tmpnam_r (char *__s) throw () __attribute__ ((__warn_unused_result__));
# 190 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 213 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 223 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 232 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) __attribute__ ((__warn_unused_result__));




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 256 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) __attribute__ ((__warn_unused_result__));
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern FILE *fdopen (int __fd, const char *__modes) throw () __attribute__ ((__warn_unused_result__));





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () __attribute__ ((__warn_unused_result__));




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () __attribute__ ((__warn_unused_result__));




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () __attribute__ ((__warn_unused_result__));





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) __attribute__ ((__warn_unused_result__));
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) __attribute__ ((__warn_unused_result__));




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));




extern int scanf (const char *__restrict __format, ...) __attribute__ ((__warn_unused_result__));

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 420 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __attribute__ ((__warn_unused_result__));





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __attribute__ ((__warn_unused_result__));


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 477 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);
# 495 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 506 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 517 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __attribute__ ((__warn_unused_result__));
# 577 "/usr/include/stdio.h" 3 4
extern char *gets (char *__s) __attribute__ ((__warn_unused_result__)) __attribute__ ((__deprecated__));
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) __attribute__ ((__warn_unused_result__));




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) __attribute__ ((__warn_unused_result__));
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __attribute__ ((__warn_unused_result__));
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));

extern int ferror (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
extern int ferror_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));




extern int fileno_unlocked (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) __attribute__ ((__warn_unused_result__));





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () __attribute__ ((__warn_unused_result__));


extern void funlockfile (FILE *__stream) throw ();
# 859 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 1 3 4
# 43 "/usr/include/x86_64-linux-gnu/bits/stdio.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
getchar (void)
{
  return _IO_getc (stdin);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fgetc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}





extern __inline __attribute__ ((__gnu_inline__)) int
getc_unlocked (FILE *__fp)
{
  return (__builtin_expect (((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0) ? __uflow (__fp) : *(unsigned char *) (__fp)->_IO_read_ptr++);
}


extern __inline __attribute__ ((__gnu_inline__)) int
getchar_unlocked (void)
{
  return (__builtin_expect (((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0) ? __uflow (stdin) : *(unsigned char *) (stdin)->_IO_read_ptr++);
}




extern __inline __attribute__ ((__gnu_inline__)) int
putchar (int __c)
{
  return _IO_putc (__c, stdout);
}




extern __inline __attribute__ ((__gnu_inline__)) int
fputc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) int
putc_unlocked (int __c, FILE *__stream)
{
  return (__builtin_expect (((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0) ? __overflow (__stream, (unsigned char) (__c)) : (unsigned char) (*(__stream)->_IO_write_ptr++ = (__c)));
}


extern __inline __attribute__ ((__gnu_inline__)) int
putchar_unlocked (int __c)
{
  return (__builtin_expect (((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0) ? __overflow (stdout, (unsigned char) (__c)) : (unsigned char) (*(stdout)->_IO_write_ptr++ = (__c)));
}





extern __inline __attribute__ ((__gnu_inline__)) __ssize_t
getline (char **__lineptr, size_t *__n, FILE *__stream)
{
  return __getdelim (__lineptr, __n, '\n', __stream);
}





extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) feof_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x10) != 0);
}


extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) ferror_unlocked (FILE *__stream) throw ()
{
  return (((__stream)->_flags & 0x20) != 0);
}
# 860 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern int __sprintf_chk (char *__restrict __s, int __flag, size_t __slen,
     const char *__restrict __format, ...) throw ();
extern int __vsprintf_chk (char *__restrict __s, int __flag, size_t __slen,
      const char *__restrict __format,
      __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) sprintf (char *__restrict __s, const char *__restrict __fmt, ...) throw ()
{
  return __builtin___sprintf_chk (__s, 2 - 1,
      __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsprintf (char *__restrict __s, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsprintf_chk (__s, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}



extern int __snprintf_chk (char *__restrict __s, size_t __n, int __flag,
      size_t __slen, const char *__restrict __format,
      ...) throw ();
extern int __vsnprintf_chk (char *__restrict __s, size_t __n, int __flag,
       size_t __slen, const char *__restrict __format,
       __gnuc_va_list __ap) throw ();


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) snprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, ...) throw ()

{
  return __builtin___snprintf_chk (__s, __n, 2 - 1,
       __builtin_object_size (__s, 2 > 1), __fmt, __builtin_va_arg_pack ());
}






extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vsnprintf (char *__restrict __s, size_t __n, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __builtin___vsnprintf_chk (__s, __n, 2 - 1,
        __builtin_object_size (__s, 2 > 1), __fmt, __ap);
}





extern int __fprintf_chk (FILE *__restrict __stream, int __flag,
     const char *__restrict __format, ...);
extern int __printf_chk (int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk (FILE *__restrict __stream, int __flag,
      const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk (int __flag, const char *__restrict __format,
     __gnuc_va_list __ap);


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
{
  return __fprintf_chk (__stream, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (2 - 1, __fmt, __builtin_va_arg_pack ());
}







extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vprintf (const char *__restrict __fmt, __gnuc_va_list __ap)
{

  return __vfprintf_chk (stdout, 2 - 1, __fmt, __ap);



}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vfprintf (FILE *__restrict __stream,
   const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk (__stream, 2 - 1, __fmt, __ap);
}


extern int __dprintf_chk (int __fd, int __flag, const char *__restrict __fmt,
     ...) __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __vdprintf_chk (int __fd, int __flag,
      const char *__restrict __fmt, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
dprintf (int __fd, const char *__restrict __fmt, ...)
{
  return __dprintf_chk (__fd, 2 - 1, __fmt,
   __builtin_va_arg_pack ());
}





extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
vdprintf (int __fd, const char *__restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk (__fd, 2 - 1, __fmt, __ap);
}




extern int __asprintf_chk (char **__restrict __ptr, int __flag,
      const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4))) __attribute__ ((__warn_unused_result__));
extern int __vasprintf_chk (char **__restrict __ptr, int __flag,
       const char *__restrict __fmt, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0))) __attribute__ ((__warn_unused_result__));
extern int __obstack_printf_chk (struct obstack *__restrict __obstack,
     int __flag, const char *__restrict __format,
     ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));
extern int __obstack_vprintf_chk (struct obstack *__restrict __obstack,
      int __flag,
      const char *__restrict __format,
      __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()
{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) __asprintf (char **__restrict __ptr, const char *__restrict __fmt, ...) throw ()

{
  return __asprintf_chk (__ptr, 2 - 1, __fmt,
    __builtin_va_arg_pack ());
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_printf (struct obstack *__restrict __obstack, const char *__restrict __fmt, ...) throw ()

{
  return __obstack_printf_chk (__obstack, 2 - 1, __fmt,
          __builtin_va_arg_pack ());
}
# 206 "/usr/include/x86_64-linux-gnu/bits/stdio2.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) vasprintf (char **__restrict __ptr, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __vasprintf_chk (__ptr, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) obstack_vprintf (struct obstack *__restrict __obstack, const char *__restrict __fmt, __gnuc_va_list __ap) throw ()

{
  return __obstack_vprintf_chk (__obstack, 2 - 1, __fmt,
    __ap);
}






extern char *__gets_chk (char *__str, size_t) __attribute__ ((__warn_unused_result__));
extern char *__gets_warn (char *__str) __asm__ ("" "gets")
     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use fgets or getline instead, gets can't " "specify buffer size")))
                               ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
gets (char *__str)
{
  if (__builtin_object_size (__str, 2 > 1) != (size_t) -1)
    return __gets_chk (__str, __builtin_object_size (__str, 2 > 1));
  return __gets_warn (__str);
}


extern char *__fgets_chk (char *__restrict __s, size_t __size, int __n,
     FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets")

                                        __attribute__ ((__warn_unused_result__));
extern char *__fgets_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_alias (__s, __n, __stream);
}

extern size_t __fread_chk (void *__restrict __ptr, size_t __ptrlen,
      size_t __size, size_t __n,
      FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread")


            __attribute__ ((__warn_unused_result__));
extern size_t __fread_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread called with bigger size * nmemb than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread (void *__restrict __ptr, size_t __size, size_t __n,
       FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n, __stream);
    }
  return __fread_alias (__ptr, __size, __n, __stream);
}


extern char *__fgets_unlocked_chk (char *__restrict __s, size_t __size,
       int __n, FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_alias (char *__restrict __s, int __n, FILE *__restrict __stream) __asm__ ("" "fgets_unlocked")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__fgets_unlocked_chk_warn (char *__restrict __s, size_t __size, int __n, FILE *__restrict __stream) __asm__ ("" "__fgets_unlocked_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fgets_unlocked called with bigger size than length " "of destination buffer")))
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
fgets_unlocked (char *__restrict __s, int __n, FILE *__restrict __stream)
{
  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__n) || __n <= 0)
 return __fgets_unlocked_chk (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);

      if ((size_t) __n > __builtin_object_size (__s, 2 > 1))
 return __fgets_unlocked_chk_warn (__s, __builtin_object_size (__s, 2 > 1), __n, __stream);
    }
  return __fgets_unlocked_alias (__s, __n, __stream);
}




extern size_t __fread_unlocked_chk (void *__restrict __ptr, size_t __ptrlen,
        size_t __size, size_t __n,
        FILE *__restrict __stream) __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_alias (void *__restrict __ptr, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "fread_unlocked")


                     __attribute__ ((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn (void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE *__restrict __stream) __asm__ ("" "__fread_unlocked_chk")




     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("fread_unlocked called with bigger size * nmemb than " "length of destination buffer")))
                                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) size_t
fread_unlocked (void *__restrict __ptr, size_t __size, size_t __n,
  FILE *__restrict __stream)
{
  if (__builtin_object_size (__ptr, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size)
   || !__builtin_constant_p (__n)
   || (__size | __n) >= (((size_t) 1) << (8 * sizeof (size_t) / 2)))
 return __fread_unlocked_chk (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
         __stream);

      if (__size * __n > __builtin_object_size (__ptr, 0))
 return __fread_unlocked_chk_warn (__ptr, __builtin_object_size (__ptr, 0), __size, __n,
       __stream);
    }


  if (__builtin_constant_p (__size)
      && __builtin_constant_p (__n)
      && (__size | __n) < (((size_t) 1) << (8 * sizeof (size_t) / 2))
      && __size * __n <= 8)
    {
      size_t __cnt = __size * __n;
      char *__cptr = (char *) __ptr;
      if (__cnt == 0)
 return 0;

      for (; __cnt > 0; --__cnt)
 {
   int __c = (__builtin_expect (((__stream)->_IO_read_ptr >= (__stream)->_IO_read_end), 0) ? __uflow (__stream) : *(unsigned char *) (__stream)->_IO_read_ptr++);
   if (__c == (-1))
     break;
   *__cptr++ = __c;
 }
      return (__cptr - (char *) __ptr) / __size;
    }

  return __fread_unlocked_alias (__ptr, __size, __n, __stream);
}
# 863 "/usr/include/stdio.h" 2 3 4





}
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 1 "/usr/include/inttypes.h" 1 3 4
# 27 "/usr/include/inttypes.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;

typedef long int int_least64_t;






typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;

typedef unsigned long int uint_least64_t;
# 68 "/usr/include/stdint.h" 3 4
typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 81 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 97 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 111 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdint.h" 2 3 4
# 28 "/usr/include/inttypes.h" 2 3 4
# 266 "/usr/include/inttypes.h" 3 4
extern "C" {




typedef struct
  {
    long int quot;
    long int rem;
  } imaxdiv_t;
# 290 "/usr/include/inttypes.h" 3 4
extern intmax_t imaxabs (intmax_t __n) throw () __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      throw () __attribute__ ((__const__));


extern intmax_t strtoimax (const char *__restrict __nptr,
      char **__restrict __endptr, int __base) throw ();


extern uintmax_t strtoumax (const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) throw ();


extern intmax_t wcstoimax (const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();


extern uintmax_t wcstoumax (const wchar_t *__restrict __nptr,
       wchar_t ** __restrict __endptr, int __base)
     throw ();





extern long int __strtol_internal (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) strtoimax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __strtoul_internal (const char *__restrict __nptr,
          char ** __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) strtoumax (const char *__restrict nptr, char **__restrict endptr, int base) throw ()

{
  return __strtoul_internal (nptr, endptr, base, 0);
}

extern long int __wcstol_internal (const wchar_t * __restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) intmax_t
__attribute__ ((__leaf__)) wcstoimax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstol_internal (nptr, endptr, base, 0);
}

extern unsigned long int __wcstoul_internal (const wchar_t *
          __restrict __nptr,
          wchar_t **
          __restrict __endptr,
          int __base, int __group)
  throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__gnu_inline__)) uintmax_t
__attribute__ ((__leaf__)) wcstoumax (const wchar_t *__restrict nptr, wchar_t **__restrict endptr, int base) throw ()

{
  return __wcstoul_internal (nptr, endptr, base, 0);
}
# 432 "/usr/include/inttypes.h" 3 4
}
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 11 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h"
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values-32.h" 1
# 49 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values-32.h"

# 49 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values-32.h"
typedef int32_t value;
typedef uint32_t uvalue;
typedef uint32_t mlsize_t;
typedef int32_t header_t;
typedef uint8_t tag_t;
typedef uint8_t color_t;
typedef uint8_t opcode_t;




typedef uint16_t code_t;
# 109 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values-32.h"
extern value value_of_float(float x);
extern float float_of_value(value v);
# 12 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 18 "test.c" 2
# 53 "test.c"
value ocaml_stack[200];
value ocaml_ram_heap[0 + 200];
value ocaml_ram_global_data[0];

 value const ocaml_flash_heap[55] = {
            ((value) ((((uvalue) (0)) << 24) | (((uvalue) (0)) << 2) | ((uvalue) (0)))),
            ((value) ((((uvalue) (248)) << 24) | (((uvalue) (2)) << 2) | ((uvalue) (0)))),
            ((value) ((char *) (&ocaml_flash_heap[5]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
            ((value) (((uint32_t) (int32_t) (-1) << 1) | 1)),
            ((value) ((((uvalue) (252)) << 24) | (((uvalue) (4)) << 2) | ((uvalue) (0)))),
            (((value) ('_') << 24) | ((value) ('t') << 16) | ((value) ('u') << 8) | ((value) ('O'))),
            (((value) ('m') << 24) | ((value) ('_') << 16) | ((value) ('f') << 8) | ((value) ('o'))),
            (((value) ('r') << 24) | ((value) ('o') << 16) | ((value) ('m') << 8) | ((value) ('e'))),
            (((value) ('\2') << 24) | ((value) ('\0') << 16) | ((value) ('\0') << 8) | ((value) ('y'))),
            ((value) ((((uvalue) (248)) << 24) | (((uvalue) (2)) << 2) | ((uvalue) (0)))),
            ((value) ((char *) (&ocaml_flash_heap[13]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
            ((value) (((uint32_t) (int32_t) (-3) << 1) | 1)),
            ((value) ((((uvalue) (252)) << 24) | (((uvalue) (2)) << 2) | ((uvalue) (0)))),
            (((value) ('l') << 24) | ((value) ('i') << 16) | ((value) ('a') << 8) | ((value) ('F'))),
            (((value) ('\0') << 24) | ((value) ('e') << 16) | ((value) ('r') << 8) | ((value) ('u'))),
            ((value) ((((uvalue) (248)) << 24) | (((uvalue) (2)) << 2) | ((uvalue) (0)))),
            ((value) ((char *) (&ocaml_flash_heap[19]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
            ((value) (((uint32_t) (int32_t) (-4) << 1) | 1)),
            ((value) ((((uvalue) (252)) << 24) | (((uvalue) (5)) << 2) | ((uvalue) (0)))),
            (((value) ('a') << 24) | ((value) ('v') << 16) | ((value) ('n') << 8) | ((value) ('I'))),
            (((value) ('_') << 24) | ((value) ('d') << 16) | ((value) ('i') << 8) | ((value) ('l'))),
            (((value) ('u') << 24) | ((value) ('g') << 16) | ((value) ('r') << 8) | ((value) ('a'))),
            (((value) ('t') << 24) | ((value) ('n') << 16) | ((value) ('e') << 8) | ((value) ('m'))),
            (((value) ('\3') << 24) | ((value) ('\0') << 16) | ((value) ('\0') << 8) | ((value) ('\0'))),
            ((value) ((((uvalue) (248)) << 24) | (((uvalue) (2)) << 2) | ((uvalue) (0)))),
            ((value) ((char *) (&ocaml_flash_heap[28]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
            ((value) (((uint32_t) (int32_t) (-6) << 1) | 1)),
            ((value) ((((uvalue) (252)) << 24) | (((uvalue) (5)) << 2) | ((uvalue) (0)))),
            (((value) ('i') << 24) | ((value) ('v') << 16) | ((value) ('i') << 8) | ((value) ('D'))),
            (((value) ('n') << 24) | ((value) ('o') << 16) | ((value) ('i') << 8) | ((value) ('s'))),
            (((value) ('_') << 24) | ((value) ('y') << 16) | ((value) ('b') << 8) | ((value) ('_'))),
            (((value) ('o') << 24) | ((value) ('r') << 16) | ((value) ('e') << 8) | ((value) ('z'))),
            (((value) ('\3') << 24) | ((value) ('\0') << 16) | ((value) ('\0') << 8) | ((value) ('\0'))),
            ((value) ((((uvalue) (248)) << 24) | (((uvalue) (2)) << 2) | ((uvalue) (0)))),
            ((value) ((char *) (&ocaml_flash_heap[37]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
            ((value) (((uint32_t) (int32_t) (-9) << 1) | 1)),
            ((value) ((((uvalue) (252)) << 24) | (((uvalue) (4)) << 2) | ((uvalue) (0)))),
            (((value) ('c') << 24) | ((value) ('a') << 16) | ((value) ('t') << 8) | ((value) ('S'))),
            (((value) ('v') << 24) | ((value) ('o') << 16) | ((value) ('_') << 8) | ((value) ('k'))),
            (((value) ('l') << 24) | ((value) ('f') << 16) | ((value) ('r') << 8) | ((value) ('e'))),
            (((value) ('\1') << 24) | ((value) ('\0') << 16) | ((value) ('w') << 8) | ((value) ('o'))),
            ((value) ((((uvalue) (247)) << 24) | (((uvalue) (1)) << 2) | ((uvalue) (0)))),
            ((value) (((uint32_t) (35) << 1) | 0x80000001)),
            ((value) ((((uvalue) (247)) << 24) | (((uvalue) (1)) << 2) | ((uvalue) (0)))),
            ((value) (((uint32_t) (217) << 1) | 0x80000001)),
            ((value) ((((uvalue) (247)) << 24) | (((uvalue) (1)) << 2) | ((uvalue) (0)))),
            ((value) (((uint32_t) (142) << 1) | 0x80000001)),
            ((value) ((((uvalue) (247)) << 24) | (((uvalue) (1)) << 2) | ((uvalue) (0)))),
            ((value) (((uint32_t) (86) << 1) | 0x80000001)),
            ((value) ((((uvalue) (247)) << 24) | (((uvalue) (1)) << 2) | ((uvalue) (0)))),
            ((value) (((uint32_t) (198) << 1) | 0x80000001)),
            ((value) ((((uvalue) (247)) << 24) | (((uvalue) (1)) << 2) | ((uvalue) (0)))),
            ((value) (((uint32_t) (9) << 1) | 0x80000001)),
            ((value) ((((uvalue) (247)) << 24) | (((uvalue) (1)) << 2) | ((uvalue) (0)))),
            ((value) (((uint32_t) (3) << 1) | 0x80000001))
};

 value const ocaml_initial_static_heap[0] = {
};

 value const ocaml_initial_stack[3] = {
           ((value) (((uint32_t) (int32_t) (8) << 1) | 1)),
           ((value) (((uint32_t) (int32_t) (1) << 1) | 1)),
           ((value) (((uint32_t) (int32_t) (8) << 1) | 1))
};

 value const ocaml_flash_global_data[6] = {
           ((value) ((char *) (&ocaml_flash_heap[44]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
           ((value) ((char *) (&ocaml_flash_heap[46]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
           ((value) ((char *) (&ocaml_flash_heap[48]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
           ((value) ((char *) (&ocaml_flash_heap[50]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
           ((value) ((char *) (&ocaml_flash_heap[52]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000),
           ((value) ((char *) (&ocaml_flash_heap[54]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000)
};

value acc = ((value) ((char *) (&ocaml_flash_heap[42]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000);
value env = ((value) 0x1);
# 144 "test.c"
 opcode_t const ocaml_bytecode[265] = {
             16, 0, 233,
             0,
             21, 0,
             11, 1,
             12,
             13, 1,
             0,
             14, 0,
             9,
             3,
             14, 1,
             9,
             5,
             18, 8,
             0,
             4,
             22, 1,
             11, 4,
             0,
             4,
             22, 2,
             11, 4,
             12,
             13, 1,
             0,
             14, 0,
             9,
             3,
             14, 1,
             9,
             4,
             14, 2,
             9,
             5,
             14, 3,
             9,
             7,
             19, 3, 0, 6, 16, 22,
             1,
             3,
             22, 1,
             2,
             6,
             22, 1,
             11, 6,
             1,
             3,
             22, 2,
             11, 6,
             1,
             3,
             22, 1,
             2,
             6,
             22, 2,
             11, 6,
             0,
             19, 24, 0, 35, 38, 41, 44, 47, 51, 27, 31, 35, 38, 41, 44, 47, 51, 47, 51, 44, 35, 35, 38, 41, 44, 47, 51,
             27, 6,
             11, 1,
             27, 7,
             11, 1,
             23,
             11, 1,
             24,
             11, 1,
             25,
             11, 1,
             26,
             11, 1,
             27, 4,
             11, 1,
             27, 5,
             11, 1,
             0,
             19, 24, 0, 35, 38, 41, 44, 47, 51, 27, 31, 35, 38, 41, 44, 47, 51, 47, 51, 44, 35, 35, 38, 41, 44, 47, 51,
             27, 6,
             11, 1,
             27, 7,
             11, 1,
             23,
             11, 1,
             24,
             11, 1,
             25,
             11, 1,
             26,
             11, 1,
             27, 4,
             11, 1,
             27, 5,
             11, 1,
             0,
             31, 8, 14,
             0,
             31, 18, 7,
             27, 4,
             11, 1,
             26,
             11, 1,
             27, 5,
             11, 1,
             0,
             31, 8, 12,
             0,
             29, 18,
             30,
             18, 3,
             24,
             11, 1,
             25,
             11, 1,
             10,
             15, 25,
             20,
             23,
             3,
             14, 4,
             10,
             28, 1, 244,
             14, 5,
             9,
             24,
             3,
             14, 4,
             10,
             28, 1, 244,
             14, 5,
             9,
             24,
             17, (opcode_t) -24,
             8, 1,
             32
};

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 1


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c" 1

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c" 2

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 1

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 36 "/usr/include/c++/7/stdlib.h" 3
# 1 "/usr/include/c++/7/cstdlib" 1 3
# 39 "/usr/include/c++/7/cstdlib" 3
       
# 40 "/usr/include/c++/7/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 1 3
# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3

# 229 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 251 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 533 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/os_defines.h" 1 3
# 534 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/7/bits/cpu_defines.h" 1 3
# 537 "/usr/include/x86_64-linux-gnu/c++/7/bits/c++config.h" 2 3
# 42 "/usr/include/c++/7/cstdlib" 2 3
# 75 "/usr/include/c++/7/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 207 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 244 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 261 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 278 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () __attribute__ ((__warn_unused_result__));



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 272 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 273 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 360 "/usr/include/stdlib.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) int
__attribute__ ((__leaf__)) atoi (const char *__nptr) throw ()
{
  return (int) strtol (__nptr, (char **) __null, 10);
}
extern __inline __attribute__ ((__gnu_inline__)) long int
__attribute__ ((__leaf__)) atol (const char *__nptr) throw ()
{
  return strtol (__nptr, (char **) __null, 10);
}


__extension__ extern __inline __attribute__ ((__gnu_inline__)) long long int
__attribute__ ((__leaf__)) atoll (const char *__nptr) throw ()
{
  return strtoll (__nptr, (char **) __null, 10);
}
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () __attribute__ ((__warn_unused_result__));


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 98 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 115 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 128 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 132 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 146 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 178 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 194 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4






# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap-16.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 2 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline unsigned int
__bswap_32 (unsigned int __bsx)
{
  return __builtin_bswap32 (__bsx);
}
# 108 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{
  return __builtin_bswap64 (__bsx);
}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 195 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4







struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);





# 1 "/usr/include/x86_64-linux-gnu/bits/select2.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/select2.h" 3 4
extern long int __fdelt_chk (long int __d);
extern long int __fdelt_warn (long int __d)
  __attribute__((__warning__ ("bit outside of fd_set selected")));
# 124 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


}
# 198 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 1 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sysmacros.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 2 3 4
# 71 "/usr/include/x86_64-linux-gnu/sys/sysmacros.h" 3 4
extern "C" {

extern unsigned int gnu_dev_major (__dev_t __dev) throw () __attribute__ ((__const__));
extern unsigned int gnu_dev_minor (__dev_t __dev) throw () __attribute__ ((__const__));
extern __dev_t gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () __attribute__ ((__const__));



__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int __attribute__ ((__leaf__)) gnu_dev_major (__dev_t __dev) throw () { unsigned int __major; __major = ((__dev & (__dev_t) 0x00000000000fff00u) >> 8); __major |= ((__dev & (__dev_t) 0xfffff00000000000u) >> 32); return __major; }
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) unsigned int __attribute__ ((__leaf__)) gnu_dev_minor (__dev_t __dev) throw () { unsigned int __minor; __minor = ((__dev & (__dev_t) 0x00000000000000ffu) >> 0); __minor |= ((__dev & (__dev_t) 0x00000ffffff00000u) >> 12); return __minor; }
__extension__ extern __inline __attribute__ ((__gnu_inline__)) __attribute__ ((__const__)) __dev_t __attribute__ ((__leaf__)) gnu_dev_makedev (unsigned int __major, unsigned int __minor) throw () { __dev_t __dev; __dev = (((__dev_t) (__major & 0x00000fffu)) << 8); __dev |= (((__dev_t) (__major & 0xfffff000u)) << 32); __dev |= (((__dev_t) (__minor & 0x000000ffu)) << 0); __dev |= (((__dev_t) (__minor & 0xffffff00u)) << 12); return __dev; }



}
# 206 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4






typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 246 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;
 




  short __spins; short __elision;
  __pthread_list_t __list;
# 145 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
 
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 255 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) __attribute__ ((__warn_unused_result__));




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) __attribute__ ((__warn_unused_result__));



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 607 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) __attribute__ ((__warn_unused_result__));





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () __attribute__ ((__warn_unused_result__));






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) __attribute__ ((__warn_unused_result__));


# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 1 3 4
# 19 "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) void *
bsearch (const void *__key, const void *__base, size_t __nmemb, size_t __size,
  __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u)
    {
      __idx = (__l + __u) / 2;
      __p = (void *) (((const char *) __base) + (__idx * __size));
      __comparison = (*__compar) (__key, __p);
      if (__comparison < 0)
 __u = __idx;
      else if (__comparison > 0)
 __l = __idx + 1;
      else
 return (void *) __p;
    }

  return __null;
}
# 823 "/usr/include/stdlib.h" 2 3 4




extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern long int labs (long int __x) throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) __attribute__ ((__warn_unused_result__));
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) __attribute__ ((__warn_unused_result__));
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) __attribute__ ((__warn_unused_result__));




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) __attribute__ ((__warn_unused_result__));





extern void setkey (const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) __attribute__ ((__warn_unused_result__));







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () __attribute__ ((__warn_unused_result__));






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1016 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 3 4
extern __inline __attribute__ ((__gnu_inline__)) double
__attribute__ ((__leaf__)) atof (const char *__nptr) throw ()
{
  return strtod (__nptr, (char **) __null);
}
# 1017 "/usr/include/stdlib.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/stdlib.h" 3 4
extern char *__realpath_chk (const char *__restrict __name,
        char *__restrict __resolved,
        size_t __resolvedlen) throw () __attribute__ ((__warn_unused_result__));
extern char *__realpath_alias (const char *__restrict __name, char *__restrict __resolved) throw () __asm__ ("" "realpath")

                                                 __attribute__ ((__warn_unused_result__));
extern char *__realpath_chk_warn (const char *__restrict __name, char *__restrict __resolved, size_t __resolvedlen) throw () __asm__ ("" "__realpath_chk")


                                                __attribute__ ((__warn_unused_result__))
     __attribute__((__warning__ ("second argument of realpath must be either NULL or at " "least PATH_MAX bytes long buffer")))
                                      ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) realpath (const char *__restrict __name, char *__restrict __resolved) throw ()
{
  if (__builtin_object_size (__resolved, 2 > 1) != (size_t) -1)
    {




      return __realpath_chk (__name, __resolved, __builtin_object_size (__resolved, 2 > 1));
    }

  return __realpath_alias (__name, __resolved);
}


extern int __ptsname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ptsname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ptsname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ptsname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ptsname_r called with buflen bigger than " "size of buf")))
                   ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ptsname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ptsname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ptsname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ptsname_r_alias (__fd, __buf, __buflen);
}


extern int __wctomb_chk (char *__s, wchar_t __wchar, size_t __buflen)
  throw () __attribute__ ((__warn_unused_result__));
extern int __wctomb_alias (char *__s, wchar_t __wchar) throw () __asm__ ("" "wctomb")
              __attribute__ ((__warn_unused_result__));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) int
__attribute__ ((__leaf__)) wctomb (char *__s, wchar_t __wchar) throw ()
{







  if (__builtin_object_size (__s, 2 > 1) != (size_t) -1 && 16 > __builtin_object_size (__s, 2 > 1))
    return __wctomb_chk (__s, __wchar, __builtin_object_size (__s, 2 > 1));
  return __wctomb_alias (__s, __wchar);
}


extern size_t __mbstowcs_chk (wchar_t *__restrict __dst,
         const char *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __mbstowcs_alias (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw () __asm__ ("" "mbstowcs")


                                  ;
extern size_t __mbstowcs_chk_warn (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__mbstowcs_chk")



     __attribute__((__warning__ ("mbstowcs called with dst buffer smaller than len " "* sizeof (wchar_t)")))
                        ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) mbstowcs (wchar_t *__restrict __dst, const char *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __mbstowcs_chk (__dst, __src, __len,
          __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));

      if (__len > __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t))
 return __mbstowcs_chk_warn (__dst, __src, __len,
         __builtin_object_size (__dst, 2 > 1) / sizeof (wchar_t));
    }
  return __mbstowcs_alias (__dst, __src, __len);
}


extern size_t __wcstombs_chk (char *__restrict __dst,
         const wchar_t *__restrict __src,
         size_t __len, size_t __dstlen) throw ();
extern size_t __wcstombs_alias (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw () __asm__ ("" "wcstombs")


                                  ;
extern size_t __wcstombs_chk_warn (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len, size_t __dstlen) throw () __asm__ ("" "__wcstombs_chk")



     __attribute__((__warning__ ("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) wcstombs (char *__restrict __dst, const wchar_t *__restrict __src, size_t __len) throw ()

{
  if (__builtin_object_size (__dst, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __wcstombs_chk (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
      if (__len > __builtin_object_size (__dst, 2 > 1))
 return __wcstombs_chk_warn (__dst, __src, __len, __builtin_object_size (__dst, 2 > 1));
    }
  return __wcstombs_alias (__dst, __src, __len);
}
# 1021 "/usr/include/stdlib.h" 2 3 4





}
# 76 "/usr/include/c++/7/cstdlib" 2 3

# 1 "/usr/include/c++/7/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/7/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/7/bits/std_abs.h" 3
# 46 "/usr/include/c++/7/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }
# 106 "/usr/include/c++/7/bits/std_abs.h" 3

}
}
# 78 "/usr/include/c++/7/cstdlib" 2 3
# 121 "/usr/include/c++/7/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/7/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/7/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/7/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 2
# 1 "/usr/include/signal.h" 1 3 4
# 27 "/usr/include/signal.h" 3 4
extern "C" {


# 1 "/usr/include/x86_64-linux-gnu/bits/signum.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/signum.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/signum-generic.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/signum.h" 2 3 4
# 31 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/sig_atomic_t.h" 1 3 4







typedef __sig_atomic_t sig_atomic_t;
# 33 "/usr/include/signal.h" 2 3 4
# 57 "/usr/include/signal.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/__sigval_t.h" 3 4
union sigval
{
  int sival_int;
  void *sival_ptr;
};

typedef union sigval __sigval_t;
# 7 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-arch.h" 1 3 4
# 17 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 2 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/types/siginfo_t.h" 3 4
typedef struct
  {
    int si_signo;

    int si_errno;

    int si_code;





    int __pad0;


    union
      {
 int _pad[((128 / sizeof (int)) - 4)];


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
   } _kill;


 struct
   {
     int si_tid;
     int si_overrun;
     __sigval_t si_sigval;
   } _timer;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     __sigval_t si_sigval;
   } _rt;


 struct
   {
     __pid_t si_pid;
     __uid_t si_uid;
     int si_status;
     __clock_t si_utime;
     __clock_t si_stime;
   } _sigchld;


 struct
   {
     void *si_addr;
    
     short int si_addr_lsb;
     union
       {

  struct
    {
      void *_lower;
      void *_upper;
    } _addr_bnd;

  __uint32_t _pkey;
       } _bounds;
   } _sigfault;


 struct
   {
     long int si_band;
     int si_fd;
   } _sigpoll;



 struct
   {
     void *_call_addr;
     int _syscall;
     unsigned int _arch;
   } _sigsys;

      } _sifields;
  } siginfo_t ;
# 58 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
enum
{
  SI_ASYNCNL = -60,
  SI_TKILL = -6,
  SI_SIGIO,

  SI_ASYNCIO,
  SI_MESGQ,
  SI_TIMER,





  SI_QUEUE,
  SI_USER,
  SI_KERNEL = 0x80
# 63 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 3 4
};




enum
{
  ILL_ILLOPC = 1,

  ILL_ILLOPN,

  ILL_ILLADR,

  ILL_ILLTRP,

  ILL_PRVOPC,

  ILL_PRVREG,

  ILL_COPROC,

  ILL_BADSTK

};


enum
{
  FPE_INTDIV = 1,

  FPE_INTOVF,

  FPE_FLTDIV,

  FPE_FLTOVF,

  FPE_FLTUND,

  FPE_FLTRES,

  FPE_FLTINV,

  FPE_FLTSUB

};


enum
{
  SEGV_MAPERR = 1,

  SEGV_ACCERR,

  SEGV_BNDERR,

  SEGV_PKUERR

};


enum
{
  BUS_ADRALN = 1,

  BUS_ADRERR,

  BUS_OBJERR,

  BUS_MCEERR_AR,

  BUS_MCEERR_AO

};




enum
{
  TRAP_BRKPT = 1,

  TRAP_TRACE

};




enum
{
  CLD_EXITED = 1,

  CLD_KILLED,

  CLD_DUMPED,

  CLD_TRAPPED,

  CLD_STOPPED,

  CLD_CONTINUED

};


enum
{
  POLL_IN = 1,

  POLL_OUT,

  POLL_MSG,

  POLL_ERR,

  POLL_PRI,

  POLL_HUP

};





# 1 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts-arch.h" 1 3 4
# 189 "/usr/include/x86_64-linux-gnu/bits/siginfo-consts.h" 2 3 4
# 59 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 1 3 4
# 16 "/usr/include/x86_64-linux-gnu/bits/types/sigval_t.h" 3 4
typedef __sigval_t sigval_t;
# 63 "/usr/include/signal.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 2 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/sigevent_t.h" 3 4
typedef struct sigevent
  {
    __sigval_t sigev_value;
    int sigev_signo;
    int sigev_notify;

    union
      {
 int _pad[((64 / sizeof (int)) - 4)];



 __pid_t _tid;

 struct
   {
     void (*_function) (__sigval_t);
     pthread_attr_t *_attribute;
   } _sigev_thread;
      } _sigev_un;
  } sigevent_t;
# 67 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/sigevent-consts.h" 3 4
enum
{
  SIGEV_SIGNAL = 0,

  SIGEV_NONE,

  SIGEV_THREAD,


  SIGEV_THREAD_ID = 4


};
# 68 "/usr/include/signal.h" 2 3 4




typedef void (*__sighandler_t) (int);




extern __sighandler_t __sysv_signal (int __sig, __sighandler_t __handler)
     throw ();

extern __sighandler_t sysv_signal (int __sig, __sighandler_t __handler)
     throw ();






extern __sighandler_t signal (int __sig, __sighandler_t __handler)
     throw ();
# 112 "/usr/include/signal.h" 3 4
extern int kill (__pid_t __pid, int __sig) throw ();






extern int killpg (__pid_t __pgrp, int __sig) throw ();



extern int raise (int __sig) throw ();



extern __sighandler_t ssignal (int __sig, __sighandler_t __handler)
     throw ();
extern int gsignal (int __sig) throw ();




extern void psignal (int __sig, const char *__s);


extern void psiginfo (const siginfo_t *__pinfo, const char *__s);
# 151 "/usr/include/signal.h" 3 4
extern int sigpause (int __sig) __asm__ ("__xpg_sigpause");
# 170 "/usr/include/signal.h" 3 4
extern int sigblock (int __mask) throw () __attribute__ ((__deprecated__));


extern int sigsetmask (int __mask) throw () __attribute__ ((__deprecated__));


extern int siggetmask (void) throw () __attribute__ ((__deprecated__));
# 185 "/usr/include/signal.h" 3 4
typedef __sighandler_t sighandler_t;




typedef __sighandler_t sig_t;





extern int sigemptyset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigfillset (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigaddset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigdelset (sigset_t *__set, int __signo) throw () __attribute__ ((__nonnull__ (1)));


extern int sigismember (const sigset_t *__set, int __signo)
     throw () __attribute__ ((__nonnull__ (1)));



extern int sigisemptyset (const sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));


extern int sigandset (sigset_t *__set, const sigset_t *__left,
        const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));


extern int sigorset (sigset_t *__set, const sigset_t *__left,
       const sigset_t *__right) throw () __attribute__ ((__nonnull__ (1, 2, 3)));




# 1 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/sigaction.h" 3 4
struct sigaction
  {


    union
      {

 __sighandler_t sa_handler;

 void (*sa_sigaction) (int, siginfo_t *, void *);
      }
    __sigaction_handler;







    __sigset_t sa_mask;


    int sa_flags;


    void (*sa_restorer) (void);
  };
# 227 "/usr/include/signal.h" 2 3 4


extern int sigprocmask (int __how, const sigset_t *__restrict __set,
   sigset_t *__restrict __oset) throw ();






extern int sigsuspend (const sigset_t *__set) __attribute__ ((__nonnull__ (1)));


extern int sigaction (int __sig, const struct sigaction *__restrict __act,
        struct sigaction *__restrict __oact) throw ();


extern int sigpending (sigset_t *__set) throw () __attribute__ ((__nonnull__ (1)));







extern int sigwait (const sigset_t *__restrict __set, int *__restrict __sig)
     __attribute__ ((__nonnull__ (1, 2)));







extern int sigwaitinfo (const sigset_t *__restrict __set,
   siginfo_t *__restrict __info) __attribute__ ((__nonnull__ (1)));






extern int sigtimedwait (const sigset_t *__restrict __set,
    siginfo_t *__restrict __info,
    const struct timespec *__restrict __timeout)
     __attribute__ ((__nonnull__ (1)));



extern int sigqueue (__pid_t __pid, int __sig, const union sigval __val)
     throw ();
# 286 "/usr/include/signal.h" 3 4
extern const char *const _sys_siglist[(64 + 1)];
extern const char *const sys_siglist[(64 + 1)];



# 1 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpx_sw_bytes
{
  __uint32_t magic1;
  __uint32_t extended_size;
  __uint64_t xstate_bv;
  __uint32_t xstate_size;
  __uint32_t __glibc_reserved1[7];
};

struct _fpreg
{
  unsigned short significand[4];
  unsigned short exponent;
};

struct _fpxreg
{
  unsigned short significand[4];
  unsigned short exponent;
  unsigned short __glibc_reserved1[3];
};

struct _xmmreg
{
  __uint32_t element[4];
};
# 123 "/usr/include/x86_64-linux-gnu/bits/sigcontext.h" 3 4
struct _fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _fpxreg _st[8];
  struct _xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};

struct sigcontext
{
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rdi;
  __uint64_t rsi;
  __uint64_t rbp;
  __uint64_t rbx;
  __uint64_t rdx;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rsp;
  __uint64_t rip;
  __uint64_t eflags;
  unsigned short cs;
  unsigned short gs;
  unsigned short fs;
  unsigned short __pad0;
  __uint64_t err;
  __uint64_t trapno;
  __uint64_t oldmask;
  __uint64_t cr2;
  __extension__ union
    {
      struct _fpstate * fpstate;
      __uint64_t __fpstate_word;
    };
  __uint64_t __reserved1 [8];
};



struct _xsave_hdr
{
  __uint64_t xstate_bv;
  __uint64_t __glibc_reserved1[2];
  __uint64_t __glibc_reserved2[5];
};

struct _ymmh_state
{
  __uint32_t ymmh_space[64];
};

struct _xstate
{
  struct _fpstate fpstate;
  struct _xsave_hdr xstate_hdr;
  struct _ymmh_state ymmh;
};
# 292 "/usr/include/signal.h" 2 3 4


extern int sigreturn (struct sigcontext *__scp) throw ();






# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 302 "/usr/include/signal.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/types/stack_t.h" 2 3 4


typedef struct
  {
    void *ss_sp;
    int ss_flags;
    size_t ss_size;
  } stack_t;
# 304 "/usr/include/signal.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 1 3 4
# 37 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
__extension__ typedef long long int greg_t;
# 46 "/usr/include/x86_64-linux-gnu/sys/ucontext.h" 3 4
typedef greg_t gregset_t[23];



enum
{
  REG_R8 = 0,

  REG_R9,

  REG_R10,

  REG_R11,

  REG_R12,

  REG_R13,

  REG_R14,

  REG_R15,

  REG_RDI,

  REG_RSI,

  REG_RBP,

  REG_RBX,

  REG_RDX,

  REG_RAX,

  REG_RCX,

  REG_RSP,

  REG_RIP,

  REG_EFL,

  REG_CSGSFS,

  REG_ERR,

  REG_TRAPNO,

  REG_OLDMASK,

  REG_CR2

};


struct _libc_fpxreg
{
  unsigned short int significand[4];
  unsigned short int exponent;
  unsigned short int __glibc_reserved1[3];
};

struct _libc_xmmreg
{
  __uint32_t element[4];
};

struct _libc_fpstate
{

  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  struct _libc_fpxreg _st[8];
  struct _libc_xmmreg _xmm[16];
  __uint32_t __glibc_reserved1[24];
};


typedef struct _libc_fpstate *fpregset_t;


typedef struct
  {
    gregset_t gregs;

    fpregset_t fpregs;
    __extension__ unsigned long long __reserved1 [8];
} mcontext_t;


typedef struct ucontext_t
  {
    unsigned long int uc_flags;
    struct ucontext_t *uc_link;
    stack_t uc_stack;
    mcontext_t uc_mcontext;
    sigset_t uc_sigmask;
    struct _libc_fpstate __fpregs_mem;
  } ucontext_t;
# 307 "/usr/include/signal.h" 2 3 4







extern int siginterrupt (int __sig, int __interrupt) throw ();

# 1 "/usr/include/x86_64-linux-gnu/bits/sigstack.h" 1 3 4
# 317 "/usr/include/signal.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/ss_flags.h" 3 4
enum
{
  SS_ONSTACK = 1,

  SS_DISABLE

};
# 318 "/usr/include/signal.h" 2 3 4



extern int sigaltstack (const stack_t *__restrict __ss,
   stack_t *__restrict __oss) throw ();




# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sigstack.h" 3 4
struct sigstack
  {
    void *ss_sp;
    int ss_onstack;
  };
# 328 "/usr/include/signal.h" 2 3 4







extern int sigstack (struct sigstack *__ss, struct sigstack *__oss)
     throw () __attribute__ ((__deprecated__));






extern int sighold (int __sig) throw ();


extern int sigrelse (int __sig) throw ();


extern int sigignore (int __sig) throw ();


extern __sighandler_t sigset (int __sig, __sighandler_t __disp) throw ();






# 1 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/sigthread.h" 3 4
extern int pthread_sigmask (int __how,
       const __sigset_t *__restrict __newmask,
       __sigset_t *__restrict __oldmask)throw ();


extern int pthread_kill (pthread_t __threadid, int __signo) throw ();



extern int pthread_sigqueue (pthread_t __threadid, int __signo,
        const union sigval __value) throw ();
# 360 "/usr/include/signal.h" 2 3 4






extern int __libc_current_sigrtmin (void) throw ();

extern int __libc_current_sigrtmax (void) throw ();




}
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 2
# 1 "/usr/include/unistd.h" 1 3 4
# 27 "/usr/include/unistd.h" 3 4
extern "C" {
# 205 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/posix_opt.h" 1 3 4
# 206 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/environments.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/environments.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/environments.h" 2 3 4
# 210 "/usr/include/unistd.h" 2 3 4
# 229 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 230 "/usr/include/unistd.h" 2 3 4
# 277 "/usr/include/unistd.h" 3 4
typedef __socklen_t socklen_t;
# 290 "/usr/include/unistd.h" 3 4
extern int access (const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));
# 337 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 348 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) __attribute__ ((__warn_unused_result__));





extern ssize_t write (int __fd, const void *__buf, size_t __n) __attribute__ ((__warn_unused_result__));
# 379 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) __attribute__ ((__warn_unused_result__));






extern ssize_t pwrite (int __fd, const void *__buf, size_t __n,
         __off_t __offset) __attribute__ ((__warn_unused_result__));
# 407 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) __attribute__ ((__warn_unused_result__));


extern ssize_t pwrite64 (int __fd, const void *__buf, size_t __n,
    __off64_t __offset) __attribute__ ((__warn_unused_result__));







extern int pipe (int __pipedes[2]) throw () __attribute__ ((__warn_unused_result__));




extern int pipe2 (int __pipedes[2], int __flags) throw () __attribute__ ((__warn_unused_result__));
# 435 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 447 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);







extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 472 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () __attribute__ ((__warn_unused_result__));




extern int lchown (const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));






extern int fchownat (int __fd, const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int chdir (const char *__path) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int fchdir (int __fd) throw () __attribute__ ((__warn_unused_result__));
# 514 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () __attribute__ ((__warn_unused_result__));





extern char *get_current_dir_name (void) throw ();







extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__));




extern int dup (int __fd) throw () __attribute__ ((__warn_unused_result__));


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (const char *__path, char *const __argv[],
     char *const __envp[]) throw () __attribute__ ((__nonnull__ (1, 2)));




extern int fexecve (int __fd, char *const __argv[], char *const __envp[])
     throw () __attribute__ ((__nonnull__ (2)));




extern int execv (const char *__path, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execle (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execl (const char *__path, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int execvp (const char *__file, char *const __argv[])
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execlp (const char *__file, const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int execvpe (const char *__file, char *const __argv[],
      char *const __envp[])
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int nice (int __inc) throw () __attribute__ ((__warn_unused_result__));




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/confname.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS,


    _CS_V6_ENV,

    _CS_V7_ENV

  };
# 613 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();


extern __pid_t getpgrp (void) throw ();


extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 663 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();






extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () __attribute__ ((__warn_unused_result__));



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw () __attribute__ ((__warn_unused_result__));




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw () __attribute__ ((__warn_unused_result__));




extern int seteuid (__uid_t __uid) throw () __attribute__ ((__warn_unused_result__));






extern int setgid (__gid_t __gid) throw () __attribute__ ((__warn_unused_result__));




extern int setregid (__gid_t __rgid, __gid_t __egid) throw () __attribute__ ((__warn_unused_result__));




extern int setegid (__gid_t __gid) throw () __attribute__ ((__warn_unused_result__));





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw () __attribute__ ((__warn_unused_result__));



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw () __attribute__ ((__warn_unused_result__));






extern __pid_t fork (void) throw ();







extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));



extern int isatty (int __fd) throw ();




extern int ttyslot (void) throw ();




extern int link (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int linkat (int __fromfd, const char *__from, int __tofd,
     const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) __attribute__ ((__warn_unused_result__));




extern int symlink (const char *__from, const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern ssize_t readlink (const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));




extern int symlinkat (const char *__from, int __tofd,
        const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) __attribute__ ((__warn_unused_result__));


extern ssize_t readlinkat (int __fd, const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));



extern int unlink (const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (const char *__name) throw () __attribute__ ((__nonnull__ (1)));







# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern "C" {







extern char *optarg;
# 50 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 91 "/usr/include/x86_64-linux-gnu/bits/getopt_core.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw () __attribute__ ((__nonnull__ (2, 3)));

}
# 28 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 2 3 4

extern "C" {
# 49 "/usr/include/x86_64-linux-gnu/bits/getopt_posix.h" 3 4
}
# 873 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern int sethostid (long int __id) throw () __attribute__ ((__warn_unused_result__));





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int setdomainname (const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));





extern int vhangup (void) throw ();


extern int revoke (const char *__file) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () __attribute__ ((__warn_unused_result__));






extern int chroot (const char *__path) throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));



extern char *getpass (const char *__prompt) __attribute__ ((__nonnull__ (1)));







extern int fsync (int __fd);





extern int syncfs (int __fd) throw ();






extern long int gethostid (void);


extern void sync (void) throw ();





extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();
# 994 "/usr/include/unistd.h" 3 4
extern int truncate (const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1006 "/usr/include/unistd.h" 3 4
extern int truncate64 (const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
# 1017 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () __attribute__ ((__warn_unused_result__));
# 1027 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () __attribute__ ((__warn_unused_result__));
# 1038 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () __attribute__ ((__warn_unused_result__));





extern void *sbrk (intptr_t __delta) throw ();
# 1059 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1082 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) __attribute__ ((__warn_unused_result__));
# 1092 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) __attribute__ ((__warn_unused_result__));
# 1110 "/usr/include/unistd.h" 3 4
ssize_t copy_file_range (int __infd, __off64_t *__pinoff,
    int __outfd, __off64_t *__poutoff,
    size_t __length, unsigned int __flags);





extern int fdatasync (int __fildes);







extern char *crypt (const char *__key, const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__glibc_block, int __edflag)
     throw () __attribute__ ((__nonnull__ (1)));






extern void swab (const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));
# 1167 "/usr/include/unistd.h" 3 4
int getentropy (void *__buffer, size_t __length) __attribute__ ((__warn_unused_result__));




# 1 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern ssize_t __read_chk (int __fd, void *__buf, size_t __nbytes,
      size_t __buflen) __attribute__ ((__warn_unused_result__));
extern ssize_t __read_alias (int __fd, void *__buf, size_t __nbytes) __asm__ ("" "read")
                               __attribute__ ((__warn_unused_result__));
extern ssize_t __read_chk_warn (int __fd, void *__buf, size_t __nbytes, size_t __buflen) __asm__ ("" "__read_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("read called with bigger length than size of " "the destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
read (int __fd, void *__buf, size_t __nbytes)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __read_chk (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));

      if (__nbytes > __builtin_object_size (__buf, 0))
 return __read_chk_warn (__fd, __buf, __nbytes, __builtin_object_size (__buf, 0));
    }
  return __read_alias (__fd, __buf, __nbytes);
}


extern ssize_t __pread_chk (int __fd, void *__buf, size_t __nbytes,
       __off_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_chk (int __fd, void *__buf, size_t __nbytes,
         __off64_t __offset, size_t __bufsize) __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_alias (int __fd, void *__buf, size_t __nbytes, __off_t __offset) __asm__ ("" "pread")

                                 __attribute__ ((__warn_unused_result__));
extern ssize_t __pread64_alias (int __fd, void *__buf, size_t __nbytes, __off64_t __offset) __asm__ ("" "pread64")

                                     __attribute__ ((__warn_unused_result__));
extern ssize_t __pread_chk_warn (int __fd, void *__buf, size_t __nbytes, __off_t __offset, size_t __bufsize) __asm__ ("" "__pread_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread called with bigger length than size of " "the destination buffer")))
                                  ;
extern ssize_t __pread64_chk_warn (int __fd, void *__buf, size_t __nbytes, __off64_t __offset, size_t __bufsize) __asm__ ("" "__pread64_chk")



     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("pread64 called with bigger length than size of " "the destination buffer")))
                                  ;


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread (int __fd, void *__buf, size_t __nbytes, __off_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread_chk_warn (__fd, __buf, __nbytes, __offset,
     __builtin_object_size (__buf, 0));
    }
  return __pread_alias (__fd, __buf, __nbytes, __offset);
}
# 104 "/usr/include/x86_64-linux-gnu/bits/unistd.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) ssize_t
pread64 (int __fd, void *__buf, size_t __nbytes, __off64_t __offset)
{
  if (__builtin_object_size (__buf, 0) != (size_t) -1)
    {
      if (!__builtin_constant_p (__nbytes))
 return __pread64_chk (__fd, __buf, __nbytes, __offset, __builtin_object_size (__buf, 0));

      if ( __nbytes > __builtin_object_size (__buf, 0))
 return __pread64_chk_warn (__fd, __buf, __nbytes, __offset,
       __builtin_object_size (__buf, 0));
    }

  return __pread64_alias (__fd, __buf, __nbytes, __offset);
}




extern ssize_t __readlink_chk (const char *__restrict __path,
          char *__restrict __buf, size_t __len,
          size_t __buflen)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_alias (const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __asm__ ("" "readlink")


     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlink_chk_warn (const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__readlink_chk")



     __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlink called with bigger length " "than size of destination buffer")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlink (const char *__restrict __path, char *__restrict __buf, size_t __len) throw ()

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlink_chk (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if ( __len > __builtin_object_size (__buf, 2 > 1))
 return __readlink_chk_warn (__path, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __readlink_alias (__path, __buf, __len);
}



extern ssize_t __readlinkat_chk (int __fd, const char *__restrict __path,
     char *__restrict __buf, size_t __len,
     size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_alias (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) throw () __asm__ ("" "readlinkat")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__));
extern ssize_t __readlinkat_chk_warn (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__readlinkat_chk")



     __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("readlinkat called with bigger " "length than size of destination " "buffer")))

                ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (2, 3))) __attribute__ ((__warn_unused_result__)) ssize_t
__attribute__ ((__leaf__)) readlinkat (int __fd, const char *__restrict __path, char *__restrict __buf, size_t __len) throw ()

{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __readlinkat_chk (__fd, __path, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__len > __builtin_object_size (__buf, 2 > 1))
 return __readlinkat_chk_warn (__fd, __path, __buf, __len,
          __builtin_object_size (__buf, 2 > 1));
    }
  return __readlinkat_alias (__fd, __path, __buf, __len);
}


extern char *__getcwd_chk (char *__buf, size_t __size, size_t __buflen)
     throw () __attribute__ ((__warn_unused_result__));
extern char *__getcwd_alias (char *__buf, size_t __size) throw () __asm__ ("" "getcwd")
                                              __attribute__ ((__warn_unused_result__));
extern char *__getcwd_chk_warn (char *__buf, size_t __size, size_t __buflen) throw () __asm__ ("" "__getcwd_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getcwd caller with bigger length than size of " "destination buffer")))
                              ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getcwd (char *__buf, size_t __size) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size))
 return __getcwd_chk (__buf, __size, __builtin_object_size (__buf, 2 > 1));

      if (__size > __builtin_object_size (__buf, 2 > 1))
 return __getcwd_chk_warn (__buf, __size, __builtin_object_size (__buf, 2 > 1));
    }
  return __getcwd_alias (__buf, __size);
}


extern char *__getwd_chk (char *__buf, size_t buflen)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern char *__getwd_warn (char *__buf) throw () __asm__ ("" "getwd")
     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("please use getcwd instead, as getwd " "doesn't specify buffer size")))
                                         ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) __attribute__ ((__warn_unused_result__)) char *
__attribute__ ((__leaf__)) getwd (char *__buf) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    return __getwd_chk (__buf, __builtin_object_size (__buf, 2 > 1));
  return __getwd_warn (__buf);
}


extern size_t __confstr_chk (int __name, char *__buf, size_t __len,
        size_t __buflen) throw ();
extern size_t __confstr_alias (int __name, char *__buf, size_t __len) throw () __asm__ ("" "confstr")
                             ;
extern size_t __confstr_chk_warn (int __name, char *__buf, size_t __len, size_t __buflen) throw () __asm__ ("" "__confstr_chk")


     __attribute__((__warning__ ("confstr called with bigger length than size of destination " "buffer")))
            ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) size_t
__attribute__ ((__leaf__)) confstr (int __name, char *__buf, size_t __len) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__len))
 return __confstr_chk (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));

      if (__builtin_object_size (__buf, 2 > 1) < __len)
 return __confstr_chk_warn (__name, __buf, __len, __builtin_object_size (__buf, 2 > 1));
    }
  return __confstr_alias (__name, __buf, __len);
}


extern int __getgroups_chk (int __size, __gid_t __list[], size_t __listlen)
     throw () __attribute__ ((__warn_unused_result__));
extern int __getgroups_alias (int __size, __gid_t __list[]) throw () __asm__ ("" "getgroups")
                 __attribute__ ((__warn_unused_result__));
extern int __getgroups_chk_warn (int __size, __gid_t __list[], size_t __listlen) throw () __asm__ ("" "__getgroups_chk")


     __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getgroups called with bigger group count than what " "can fit into destination buffer")))
                                           ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getgroups (int __size, __gid_t __list[]) throw ()
{
  if (__builtin_object_size (__list, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__size) || __size < 0)
 return __getgroups_chk (__size, __list, __builtin_object_size (__list, 2 > 1));

      if (__size * sizeof (__gid_t) > __builtin_object_size (__list, 2 > 1))
 return __getgroups_chk_warn (__size, __list, __builtin_object_size (__list, 2 > 1));
    }
  return __getgroups_alias (__size, __list);
}


extern int __ttyname_r_chk (int __fd, char *__buf, size_t __buflen,
       size_t __nreal) throw () __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_alias (int __fd, char *__buf, size_t __buflen) throw () __asm__ ("" "ttyname_r")

     __attribute__ ((__nonnull__ (2)));
extern int __ttyname_r_chk_warn (int __fd, char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__ttyname_r_chk")


     __attribute__ ((__nonnull__ (2))) __attribute__((__warning__ ("ttyname_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) ttyname_r (int __fd, char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __ttyname_r_chk (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __ttyname_r_chk_warn (__fd, __buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __ttyname_r_alias (__fd, __buf, __buflen);
}



extern int __getlogin_r_chk (char *__buf, size_t __buflen, size_t __nreal)
     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_alias (char *__buf, size_t __buflen) __asm__ ("" "getlogin_r")
                     __attribute__ ((__nonnull__ (1)));
extern int __getlogin_r_chk_warn (char *__buf, size_t __buflen, size_t __nreal) __asm__ ("" "__getlogin_r_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("getlogin_r called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
getlogin_r (char *__buf, size_t __buflen)
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getlogin_r_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getlogin_r_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getlogin_r_alias (__buf, __buflen);
}




extern int __gethostname_chk (char *__buf, size_t __buflen, size_t __nreal)
     throw () __attribute__ ((__nonnull__ (1)));
extern int __gethostname_alias (char *__buf, size_t __buflen) throw () __asm__ ("" "gethostname")
                   __attribute__ ((__nonnull__ (1)));
extern int __gethostname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__gethostname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__((__warning__ ("gethostname called with bigger buflen than " "size of destination buffer")))
                                  ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) gethostname (char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __gethostname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __gethostname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __gethostname_alias (__buf, __buflen);
}




extern int __getdomainname_chk (char *__buf, size_t __buflen, size_t __nreal)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_alias (char *__buf, size_t __buflen) throw () __asm__ ("" "getdomainname")

                     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__));
extern int __getdomainname_chk_warn (char *__buf, size_t __buflen, size_t __nreal) throw () __asm__ ("" "__getdomainname_chk")


     __attribute__ ((__nonnull__ (1))) __attribute__ ((__warn_unused_result__)) __attribute__((__warning__ ("getdomainname called with bigger " "buflen than size of destination " "buffer")))

                    ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) int
__attribute__ ((__leaf__)) getdomainname (char *__buf, size_t __buflen) throw ()
{
  if (__builtin_object_size (__buf, 2 > 1) != (size_t) -1)
    {
      if (!__builtin_constant_p (__buflen))
 return __getdomainname_chk (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));

      if (__buflen > __builtin_object_size (__buf, 2 > 1))
 return __getdomainname_chk_warn (__buf, __buflen, __builtin_object_size (__buf, 2 > 1));
    }
  return __getdomainname_alias (__buf, __buflen);
}
# 1173 "/usr/include/unistd.h" 2 3 4


}
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 42 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) void *
memchr (void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const void *
memchr (const void *__s, int __c, size_t __n) throw ()
{
  return __builtin_memchr (__s, __c, __n);
}

}
# 98 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 121 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 203 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strchr (char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strchr (const char *__s, int __c) throw ()
{
  return __builtin_strchr (__s, __c);
}

}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strrchr (char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strrchr (const char *__s, int __c) throw ()
{
  return __builtin_strrchr (__s, __c);
}

}
# 260 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 272 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strpbrk (char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strpbrk (const char *__s, const char *__accept) throw ()
{
  return __builtin_strpbrk (__s, __accept);
}

}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
strstr (char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
strstr (const char *__haystack, const char *__needle) throw ()
{
  return __builtin_strstr (__haystack, __needle);
}

}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 368 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 420 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) __attribute__ ((__warn_unused_result__));





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
index (char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
index (const char *__s, int __c) throw ()
{
  return __builtin_index (__s, __c);
}

}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) char *
rindex (char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) const char *
rindex (const char *__s, int __c) throw ()
{
  return __builtin_rindex (__s, __c);
}

}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}





# 1 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/strings_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bcopy (const void *__src, void *__dest, size_t __len) throw ()
{
  (void) __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) bzero (void *__dest, size_t __len) throw ()
{
  (void) __builtin___memset_chk (__dest, '\0', __len, __builtin_object_size (__dest, 0));
}
# 145 "/usr/include/strings.h" 2 3 4
# 432 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 494 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___memcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memmove (void *__dest, const void *__src, size_t __len) throw ()
{
  return __builtin___memmove_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) mempcpy (void *__restrict __dest, const void *__restrict __src, size_t __len) throw ()

{
  return __builtin___mempcpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 0));
}
# 58 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void *
__attribute__ ((__leaf__)) memset (void *__dest, int __ch, size_t __len) throw ()
{
# 71 "/usr/include/x86_64-linux-gnu/bits/string_fortified.h" 3 4
  return __builtin___memset_chk (__dest, __ch, __len, __builtin_object_size (__dest, 0));
}




void __explicit_bzero_chk (void *__dest, size_t __len, size_t __destlen)
  throw () __attribute__ ((__nonnull__ (1)));

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) void
__attribute__ ((__leaf__)) explicit_bzero (void *__dest, size_t __len) throw ()
{
  __explicit_bzero_chk (__dest, __len, __builtin_object_size (__dest, 0));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpcpy (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___stpcpy_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}



extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncpy (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncpy_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}


extern char *__stpncpy_chk (char *__dest, const char *__src, size_t __n,
       size_t __destlen) throw ();
extern char *__stpncpy_alias (char *__dest, const char *__src, size_t __n) throw () __asm__ ("" "stpncpy")
                                 ;

extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) stpncpy (char *__dest, const char *__src, size_t __n) throw ()
{
  if (__builtin_object_size (__dest, 2 > 1) != (size_t) -1
      && (!__builtin_constant_p (__n) || __n > __builtin_object_size (__dest, 2 > 1)))
    return __stpncpy_chk (__dest, __src, __n, __builtin_object_size (__dest, 2 > 1));
  return __stpncpy_alias (__dest, __src, __n);
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strcat (char *__restrict __dest, const char *__restrict __src) throw ()
{
  return __builtin___strcat_chk (__dest, __src, __builtin_object_size (__dest, 2 > 1));
}


extern __inline __attribute__ ((__always_inline__)) __attribute__ ((__gnu_inline__)) __attribute__ ((__artificial__)) char *
__attribute__ ((__leaf__)) strncat (char *__restrict __dest, const char *__restrict __src, size_t __len) throw ()

{
  return __builtin___strncat_chk (__dest, __src, __len, __builtin_object_size (__dest, 2 > 1));
}
# 495 "/usr/include/string.h" 2 3 4



}
# 6 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/wait.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern "C" {
# 77 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t wait (int *__stat_loc);
# 100 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern __pid_t waitpid (__pid_t __pid, int *__stat_loc, int __options);
# 121 "/usr/include/x86_64-linux-gnu/sys/wait.h" 3 4
extern int waitid (idtype_t __idtype, __id_t __id, siginfo_t *__infop,
     int __options);






struct rusage;






extern __pid_t wait3 (int *__stat_loc, int __options,
        struct rusage * __usage) throw ();




extern __pid_t wait4 (__pid_t __pid, int *__stat_loc, int __options,
        struct rusage *__usage) throw ();



}
# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 2

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.h" 1





# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stdbool.h" 1 3 4
# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.h" 2


# 8 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.h"
void init_regs(int nb_proc, int is_slow);
void destroy_regs(void);
void dump_regs(void);
void exec_instr(char *instr, int size);

void avr_set_bit(uint8_t reg, uint8_t bit);
void avr_clear_bit(uint8_t reg, uint8_t bit);
bool avr_test_bit(uint8_t reg, uint8_t bit);
void avr_write_register(uint8_t reg, uint8_t val);
uint8_t avr_read_register(uint8_t reg);
int avr_random(int max);
int avr_millis();
void avr_delay(int ms);

void avr_adc_init();
uint16_t avr_analog_read(uint8_t ch);

void avr_serial_init();
char avr_serial_read();
void avr_serial_write(char c);
# 9 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.h" 1
# 15 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.h"
int create_sem(int init);
void destroy_sem(int sem);
void *alloc_shm(size_t size);
void P(int sem);
void V(int sem);
# 10 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 2

static int is_parent = 0;
static pid_t parent_pid;
static pid_t main_pid;
static pid_t *child_pids;
static pid_t cmnd_pid;
static int nb_proc;
static int *outs;
static int sem_outs;

void send_all_proc(const char *str, int size);

void destroy(){
  V(sem_outs);
  signal(
# 24 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
        13
# 24 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
               , 
# 24 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
                 ((__sighandler_t) 1)
# 24 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                        );
  send_all_proc("STOP\n", 5);
  destroy_regs();
  destroy_sem(sem_outs);
}

void terminate(){
  pid_t mypid = getpid();
  if(mypid != main_pid)
    kill(main_pid, 
# 33 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
                  2
# 33 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                        );
  if(is_parent)
    destroy();
  exit(0);
}

void error(const char *msg){
  fprintf(
# 40 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
         stderr
# 40 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
               , "Error: %s\n", msg);
  terminate();
}

void signal_handler(int signum){
  if (signum == 
# 45 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
               11
# 45 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                      ) {
    fprintf(
# 46 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
           stderr
# 46 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                 , "%s!\n", strsignal(signum));
  }
  terminate();
}

void signals(){
  signal(
# 52 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
        2
# 52 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
              , signal_handler);
  signal(
# 53 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
        13
# 53 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
               , signal_handler);
  signal(
# 54 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
        11
# 54 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
               , signal_handler);
}

int is_stop(char *instr, int size){
  return
    size == 4 &&
    (instr[0] == 'S' || instr[0] == 's') &&
    (instr[1] == 'T' || instr[1] == 't') &&
    (instr[2] == 'O' || instr[2] == 'o') &&
    (instr[3] == 'P' || instr[3] == 'p');
}

void instr_loop(int input){
  int i = 0, n;
  char buf[100];
  while((n = read(input, buf + i, sizeof(buf) - i - 1))){
    int occ = i + n;
    while(i < occ && buf[i] != '\n') i ++;
    if(i == sizeof(buf) - 1){
      buf[i] = '\0';
      fprintf(
# 74 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
             stderr
# 74 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                   , "Invalid instruction: %s\n", buf);
      i = 0;
    }else if(i != occ){
      int size;
      buf[i] = '\0';
      size = strlen(buf);
      if(is_stop(buf, size)) return;
      exec_instr(buf, size);
      i ++;
      while(1){
        int j = i;
        while(i < occ && buf[i] != '\n') i ++;
        if(i != occ){
          buf[i] = '\0';
          size = strlen(buf + j);
          if(is_stop(buf + j, size)) return;
          if(size != 0) exec_instr(buf + j, size);
          i ++;
        }else{
          i = 0;
          while(j < occ) buf[i ++] = buf[j ++];
          break;
        }
      }
    }
  }
}

void run_cmnd(const char *cmnd){
  pid_t pid;
  int pipe2[2];
  if(pipe(pipe2) == -1)
    error("pipe()");
  pid = fork();
  if(pid < 0) error("fork()");
  if(pid == 0){
    const char* args[4];
    if(close(pipe2[0]) == -1)
      error("close()");
    if(dup2(pipe2[1], 
# 113 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
                     1
# 113 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                                  ) == -1)
      error("dup2()");
    fprintf(
# 115 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
           stderr
# 115 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                 , "start '%s' (pid = %d)\n", cmnd, getpid());
    args[0] = "/bin/bash";
    args[1] = "-c";
    args[2] = cmnd;
    args[3] = 
# 119 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
             __null
# 119 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                 ;
    execv("/bin/bash", (char * const *) args);
  }else{
    cmnd_pid = pid;
    signals();
    if(close(pipe2[1]) == -1)
      error("close()");
    instr_loop(pipe2[0]);
    kill(parent_pid, 
# 127 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
                    13
# 127 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                           );
  }
}

void send_all_proc(const char *instr, int size){
  int i;
  P(sem_outs);
  for(i = 0 ; i < nb_proc ; i ++){
    int n = size;
    const char *s = instr;
    while(n > 0){
      int d = write(outs[i], s, n);
      if(d < 1) break;
      n -= d;
      s += d;
    }
  }
  V(sem_outs);
}





static const char *global_argv_tbl[] = { "<unknown>", 
# 151 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
                                                     __null 
# 151 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                                                          };
const char **global_argv = global_argv_tbl;


void init_simulator(void){
  int i, j;
  int argc;
  const char **argv;
  int *ins;
  int is_slow = 0;
  static int test_reinit = 0;
  if(test_reinit) return;
  test_reinit = 1;





  argv = global_argv;
  argc = 0;
  while (argv[argc] != 
# 171 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
                      __null
# 171 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                          ) argc ++;


  nb_proc = argc - 1;

  for(i = nb_proc ; i > 0 ; i --){
    const char *arg = argv[i];
    int len = strlen(arg);
    if(len > 3 && arg[len-4]=='.' && arg[len-3]=='h' && arg[len-2]=='e'
       && arg[len-1]=='x'){
      nb_proc --;
      argv[i] = "";
    }
    if(!strcmp(arg, "-slow")){
      is_slow = 1;
      nb_proc --;
      argv[i] = "";
    }
    if(!strcmp(arg, "-trace")){
      nb_proc --;
      argv[i] = "";
    }
  }

  init_regs(nb_proc, is_slow);
  child_pids = (pid_t *) alloc_shm(nb_proc * sizeof(pid_t));
  outs = (int *) malloc(nb_proc * sizeof(int));
  ins = (int *) malloc(nb_proc * sizeof(int));
  sem_outs = create_sem(1);

  for(i = 0 ; i < nb_proc ; i ++){
    int pipe1[2];
    if(pipe(pipe1) == -1) error("pipe()");
    ins[i] = pipe1[0];
    outs[i] = pipe1[1];
  }

  {
    pid_t pid = fork();
    if(pid < 0) error("fork()");
    if(pid) {
      is_parent = 1;
      parent_pid = pid;
      signals();
      wait(
# 215 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
          __null
# 215 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
              );
      if (nb_proc > 0) {
        usleep(100000);
        fprintf(
# 218 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
               stderr
# 218 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                     , "Program terminated, press enter to exit...\n");
        fgetc(
# 219 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
             stdin
# 219 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                  );
      } else {
        fprintf(
# 221 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
               stderr
# 221 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                     , "Program terminated.\n");
      }
      destroy();
      exit(0);
    }
  }

  signals();
  main_pid = getpid();

  if(nb_proc == 0){

    return;
  }

  P(sem_outs);

  for(i = 1, j = 0 ; i < argc ; i ++){
    pid_t pid;
    const char *arg = argv[i];
    if(arg[0] != '\0'){
      pid = fork();
      if(pid < 0) error("fork()");
      if(pid == 0){
        if(dup2(ins[j], 
# 245 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c" 3 4
                       0
# 245 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.c"
                                   ) == -1) error("dup2()");
        run_cmnd(arg);
        exit(0);
      }else{
        if(close(ins[j]) == -1) error("close()");
        child_pids[j] = pid;
      }
      j ++;
    }
  }

  V(sem_outs);
}
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 1


# 1 "/usr/include/x86_64-linux-gnu/sys/ipc.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/ipc.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ipctypes.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/ipctypes.h" 3 4

# 28 "/usr/include/x86_64-linux-gnu/bits/ipctypes.h" 3 4
typedef int __ipc_pid_t;
# 25 "/usr/include/x86_64-linux-gnu/sys/ipc.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/ipc.h" 1 3 4
# 42 "/usr/include/x86_64-linux-gnu/bits/ipc.h" 3 4
struct ipc_perm
  {
    __key_t __key;
    __uid_t uid;
    __gid_t gid;
    __uid_t cuid;
    __gid_t cgid;
    unsigned short int mode;
    unsigned short int __pad1;
    unsigned short int __seq;
    unsigned short int __pad2;
    __syscall_ulong_t __glibc_reserved1;
    __syscall_ulong_t __glibc_reserved2;
  };
# 26 "/usr/include/x86_64-linux-gnu/sys/ipc.h" 2 3 4
# 47 "/usr/include/x86_64-linux-gnu/sys/ipc.h" 3 4
extern "C" {


extern key_t ftok (const char *__pathname, int __proj_id) throw ();

}
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/sem.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/sem.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/sem.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/sem.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/sem.h" 3 4
struct semid_ds
{
  struct ipc_perm sem_perm;
  __time_t sem_otime;
  __syscall_ulong_t __glibc_reserved1;
  __time_t sem_ctime;
  __syscall_ulong_t __glibc_reserved2;
  __syscall_ulong_t sem_nsems;
  __syscall_ulong_t __glibc_reserved3;
  __syscall_ulong_t __glibc_reserved4;
};
# 72 "/usr/include/x86_64-linux-gnu/bits/sem.h" 3 4
struct seminfo
{
  int semmap;
  int semmni;
  int semmns;
  int semmnu;
  int semmsl;
  int semopm;
  int semume;
  int semusz;
  int semvmx;
  int semaem;
};
# 31 "/usr/include/x86_64-linux-gnu/sys/sem.h" 2 3 4
# 40 "/usr/include/x86_64-linux-gnu/sys/sem.h" 3 4
struct sembuf
{
  unsigned short int sem_num;
  short int sem_op;
  short int sem_flg;
};


extern "C" {


extern int semctl (int __semid, int __semnum, int __cmd, ...) throw ();


extern int semget (key_t __key, int __nsems, int __semflg) throw ();


extern int semop (int __semid, struct sembuf *__sops, size_t __nsops) throw ();



extern int semtimedop (int __semid, struct sembuf *__sops, size_t __nsops,
         const struct timespec *__timeout) throw ();


}
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 2
# 1 "/usr/include/x86_64-linux-gnu/sys/shm.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/sys/shm.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/shm.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/shm.h" 1 3 4
# 38 "/usr/include/x86_64-linux-gnu/bits/shm.h" 3 4
extern "C" {



extern int __getpagesize (void) throw () __attribute__ ((__const__));



typedef __syscall_ulong_t shmatt_t;


struct shmid_ds
  {
    struct ipc_perm shm_perm;
    size_t shm_segsz;
    __time_t shm_atime;



    __time_t shm_dtime;



    __time_t shm_ctime;



    __pid_t shm_cpid;
    __pid_t shm_lpid;
    shmatt_t shm_nattch;
    __syscall_ulong_t __glibc_reserved4;
    __syscall_ulong_t __glibc_reserved5;
  };
# 84 "/usr/include/x86_64-linux-gnu/bits/shm.h" 3 4
struct shminfo
  {
    __syscall_ulong_t shmmax;
    __syscall_ulong_t shmmin;
    __syscall_ulong_t shmmni;
    __syscall_ulong_t shmseg;
    __syscall_ulong_t shmall;
    __syscall_ulong_t __glibc_reserved1;
    __syscall_ulong_t __glibc_reserved2;
    __syscall_ulong_t __glibc_reserved3;
    __syscall_ulong_t __glibc_reserved4;
  };

struct shm_info
  {
    int used_ids;
    __syscall_ulong_t shm_tot;
    __syscall_ulong_t shm_rss;
    __syscall_ulong_t shm_swp;
    __syscall_ulong_t swap_attempts;
    __syscall_ulong_t swap_successes;
  };



}
# 31 "/usr/include/x86_64-linux-gnu/sys/shm.h" 2 3 4
# 43 "/usr/include/x86_64-linux-gnu/sys/shm.h" 3 4
extern "C" {





extern int shmctl (int __shmid, int __cmd, struct shmid_ds *__buf) throw ();


extern int shmget (key_t __key, size_t __size, int __shmflg) throw ();


extern void *shmat (int __shmid, const void *__shmaddr, int __shmflg)
     throw ();


extern int shmdt (const void *__shmaddr) throw ();

}
# 6 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 2

# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 8 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 2





# 12 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
int create_sem(int init){
  int sem = semget(
# 13 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                  ((__key_t) 0)
# 13 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                             , 1, 
# 13 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                                  01000 
# 13 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                                            | 0600);
  if(sem == -1){
    fprintf(
# 15 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
           stderr
# 15 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                 , "Error: semget()\n");
    exit(1);
  }
  if(semctl(sem, 0, 
# 18 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                   16
# 18 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                         , init) == -1){
    fprintf(
# 19 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
           stderr
# 19 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                 , "Error: semctl()\n");
    exit(1);
  }
  return sem;
}

void destroy_sem(int sem){
  if(semctl(sem, 0, 
# 26 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                   0
# 26 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                           , 0) == -1){
    fprintf(
# 27 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
           stderr
# 27 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                 , "Error: semctl()\n");
    exit(1);
  }
}

void *alloc_shm(size_t size){
  if(size == 0){
    return 
# 34 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
          __null
# 34 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
              ;
  }else{
    int id = shmget(
# 36 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                   ((__key_t) 0)
# 36 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                              , size, 
# 36 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                                      01000 
# 36 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                                                | 0600);
    void *res;
    if(id == -1){
      fprintf(
# 39 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
             stderr
# 39 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                   , "Error: shmget()\n");
      exit(1);
    }
    res = shmat(id, 
# 42 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                   __null
# 42 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                       , 0);
    if(res == 
# 43 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
             __null
# 43 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                 ){
      fprintf(
# 44 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
             stderr
# 44 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                   , "Error: shmat()\n");
      exit(1);
    }
    if(shmctl(id, 
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                 0
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                         , 
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                           __null
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                               ) == -1) fprintf(
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
                                                stderr
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                                                      , "Error: shmctl()\n");
    return res;
  }
}

void P(int sem){
  struct sembuf sops;
  sops.sem_num = 0;
  sops.sem_op = -1;
  sops.sem_flg = 0;
  if(semop(sem, &sops, 1) == -1){
    fprintf(
# 58 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
           stderr
# 58 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                 , "Error: semop()\n");
    exit(1);
  }
}

void V(int sem){
  struct sembuf sops;
  sops.sem_num = 0;
  sops.sem_op = 1;
  sops.sem_flg = 0;
  if(semop(sem, &sops, 1) == -1){
    fprintf(
# 69 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c" 3 4
           stderr
# 69 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/shared.c"
                 , "Error: semop()\n");
    exit(1);
  }
}
# 6 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 1
# 1 "/usr/include/x86_64-linux-gnu/sys/time.h" 1 3 4
# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4

# 34 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern "C" {
# 52 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 68 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) throw () __attribute__ ((__nonnull__ (1)));




extern int settimeofday (const struct timeval *__tv,
    const struct timezone *__tz)
     throw ();





extern int adjtime (const struct timeval *__delta,
      struct timeval *__olddelta) throw ();




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };






typedef int __itimer_which_t;




extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) throw ();




extern int setitimer (__itimer_which_t __which,
        const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) throw ();




extern int utimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));



extern int lutimes (const char *__file, const struct timeval __tvp[2])
     throw () __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, const struct timeval __tvp[2]) throw ();






extern int futimesat (int __fd, const char *__file,
        const struct timeval __tvp[2]) throw ();
# 186 "/usr/include/x86_64-linux-gnu/sys/time.h" 3 4
}
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 2




# 1 "/usr/include/time.h" 1 3 4
# 29 "/usr/include/time.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/7/include/stddef.h" 1 3 4
# 30 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/time.h" 1 3 4
# 73 "/usr/include/x86_64-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timex.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 74 "/usr/include/x86_64-linux-gnu/bits/time.h" 2 3 4

extern "C" {


extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) throw ();

}
# 34 "/usr/include/time.h" 2 3 4





# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 1 3 4






struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  const char *tm_zone;




};
# 40 "/usr/include/time.h" 2 3 4
# 48 "/usr/include/time.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 1 3 4







struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };
# 49 "/usr/include/time.h" 2 3 4
struct sigevent;
# 68 "/usr/include/time.h" 3 4
extern "C" {



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   const char *__restrict __format,
   const struct tm *__restrict __tp) throw ();




extern char *strptime (const char *__restrict __s,
         const char *__restrict __fmt, struct tm *__tp)
     throw ();






extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     const char *__restrict __format,
     const struct tm *__restrict __tp,
     locale_t __loc) throw ();



extern char *strptime_l (const char *__restrict __s,
    const char *__restrict __fmt, struct tm *__tp,
    locale_t __loc) throw ();





extern struct tm *gmtime (const time_t *__timer) throw ();



extern struct tm *localtime (const time_t *__timer) throw ();




extern struct tm *gmtime_r (const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();




extern char *asctime (const struct tm *__tp) throw ();


extern char *ctime (const time_t *__timer) throw ();






extern char *asctime_r (const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (const time_t *__when) throw ();
# 196 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 211 "/usr/include/time.h" 3 4
extern int nanosleep (const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();





extern int timespec_get (struct timespec *__ts, int __base)
     throw () __attribute__ ((__nonnull__ (1)));
# 280 "/usr/include/time.h" 3 4
extern int getdate_err;
# 289 "/usr/include/time.h" 3 4
extern struct tm *getdate (const char *__string);
# 303 "/usr/include/time.h" 3 4
extern int getdate_r (const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 2

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.h" 1







# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/simul.h"
void send_all_proc(const char *instr, int size);
void init_simulator(void);
# 9 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 2
# 67 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
static unsigned char *regs;
static unsigned int *analogs;
static int *sync_counter;
static int sem_regs;
static int sem_sync;
static int sem_done;
static int proc_nb;
static int is_slow;







void init_regs(int n, int slow){
  int i;
  regs = (unsigned char *) alloc_shm(255 * sizeof(unsigned char));
  analogs = (unsigned int *) alloc_shm(16 * sizeof(unsigned int));
  sync_counter = (int *) alloc_shm(sizeof(int));
  *sync_counter = 0;
  is_slow = slow;
  sem_regs = create_sem(1);
  sem_sync = create_sem(1);
  sem_done = create_sem(0);
  proc_nb = n;
  for(i = 0 ; i < 255 ; i ++) regs[i] = 0x00;
}

void destroy_regs(void){
  destroy_sem(sem_regs);
  destroy_sem(sem_sync);
  destroy_sem(sem_done);
}

void dump_regs(void){
  int i, j;
  P(sem_regs);
  for(i = 0x0 ; i <= (0x0 + 11 - 1) ; i ++){
    printf("%c: 0b", 'A' + i);
    for(j = 7 ; j >= 0 ; j --) printf("%d", (regs[i] & (1 << j)) != 0);
    printf("  = %3d  = 0x%02x\n", regs[i], regs[i]);
  }
  V(sem_regs);
}

static int int_of_hexchar(char c){
  if(c >= '0' && c <= '9') return c - '0';
  if(c >= 'A' && c <= 'F') return c - 'A' + 10;
  if(c >= 'a' && c <= 'f') return c - 'a' + 10;
  return -1;
}

static char hexchar_of_int(int n){
  n &= 0x0F;
  if(n < 10) return '0' + n;
  return 'A' + n - 10;
}



static void micro_sleep(unsigned long usec){
  struct timespec t;
  t.tv_sec = usec / 1000000;
  t.tv_nsec = (1000 * usec) % 1000000000;
  nanosleep(&t, 
# 132 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
               __null
# 132 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                   );
}

static unsigned long elapsed_time(void){
  return (unsigned long) clock() * 1000000 / 
# 136 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
                                            ((__clock_t) 1000000)
# 136 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                                                          ;
}

static void may_sleep(){
  static unsigned long mem_elpt = 0;
  if(is_slow){
    unsigned long elpt = elapsed_time();
    if(elpt - mem_elpt > 100){
      unsigned long usec = (elpt - mem_elpt) * 4;
      micro_sleep(usec);
      mem_elpt = elapsed_time();
    }
  }
}



static void send_write(char cmnd, int port, unsigned char val){
  char buf[5];
  buf[0] = cmnd;
  buf[1] = port + 'A';
  buf[2] = hexchar_of_int((val >> 4) & 0x0F);
  buf[3] = hexchar_of_int(val & 0x0F);
  buf[4] = '\n';
  send_all_proc(buf, 5);
}

static void send_write_port(int port, unsigned char val){

  send_write('W', port, val);
}

static void send_write_ddr(int ddr, unsigned char val){
  send_write('T', ddr - ((0x0 + 11 - 1) + 1), val);
}
# 190 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
static void send_set_analog(unsigned int chan, unsigned int val){
  fprintf(
# 191 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
         stderr
# 191 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
               ,"SET ANALOG %d to %d",chan,val);
  char buf[6];
  buf[0] = 'Z';
  buf[1] = hexchar_of_int(chan);
  buf[2] = hexchar_of_int((val >> 8) & 0x0F);
  buf[3] = hexchar_of_int((val >> 4) & 0x0F);
  buf[4] = hexchar_of_int(val & 0x0F);
  buf[5] = '\n';
  send_all_proc(buf, 6);
}




static void synchronize(){
  P(sem_sync);
  *sync_counter = proc_nb;
  V(sem_sync);
  send_all_proc("SYNC\n", 5);
  if(proc_nb != 0) P(sem_done);
  may_sleep();
}

static int is_reg_need_synchro(uint8_t reg){
  return
    (reg >= 0x0 && reg <= (0x0 + 11 - 1));
}

static void avr_write_register_gen(int reg, uint8_t new_val){
  uint8_t old_val = regs[reg];
  if(reg >= 0x0 && reg <= (0x0 + 11 - 1)){
    if(old_val != new_val){
      int ddr = reg - 0x0 + ((0x0 + 11 - 1) + 1);
      uint8_t ddr_val = regs[ddr];
      if(ddr_val == 0x00){
        char port_c = 'A' + reg - 0x0;
        fprintf(
# 227 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
               stderr
# 227 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                     , "Warning: the avr writes PORT%c when DDR%c=0xFF\n",
                port_c, port_c);
      }else{
 regs[reg] = new_val;
 send_write_port(reg, new_val);
      }
    }
  }
  else if(reg >= ((0x0 + 11 - 1) + 1) && reg <= (((0x0 + 11 - 1) + 1) + 11 - 1)){
    if(old_val != new_val){
      send_write_ddr(reg, new_val);
      regs[reg] = new_val;
    }
  }
  else if(reg == 37){
    regs[reg] = new_val;
    send_write_port('G'-'A',new_val);
  }
  else{
    regs[reg] = new_val;
  }
  may_sleep();
}

void avr_write_register(uint8_t reg, uint8_t new_val){

  init_simulator();
  P(sem_regs);
  avr_write_register_gen(reg, new_val);
  V(sem_regs);
}

uint8_t avr_read_register(uint8_t reg){

  uint8_t val;
  init_simulator();
  if (is_reg_need_synchro(reg)) synchronize();
  P(sem_regs);
  val = regs[reg];
  V(sem_regs);
  may_sleep();
  return val;
}

bool avr_read_bit(uint8_t reg, uint8_t bit){


  if (reg == 36){
      return 1;
  }
  uint8_t mask = 1 << bit;
  uint8_t val;
  init_simulator();
  if (is_reg_need_synchro(reg)) synchronize();
  P(sem_regs);

  val = (regs[reg-((((0x0 + 11 - 1) + 1) + 11 - 1) + 1)] & mask) != 0;
  V(sem_regs);
  may_sleep();
  return val;
}

void avr_clear_bit(uint8_t reg, uint8_t bit){

  init_simulator();
  P(sem_regs);
  {
    uint8_t old_val = regs[reg];
    uint8_t mask = 1 << bit;
    uint8_t new_val = old_val & ~mask;
    if(reg >= 0x0 && reg <= (0x0 + 11 - 1)){
      if(old_val != new_val){
        int ddr = reg - 0x0 + ((0x0 + 11 - 1) + 1);
        uint8_t ddr_val = regs[ddr];
        if(!(ddr_val & mask)){
          char port_c = 'A' + reg - 0x0;
          fprintf(
# 303 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
                 stderr
# 303 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                       ,
                  "Warning: the avr clears PORT%c.R%c%d when DDR%c=0x%02X\n",
                  port_c, port_c, bit, port_c, ddr_val);
        }else{
          regs[reg] = new_val;
          send_write_port(reg, new_val);
        }
      }
    } else if(reg >= ((0x0 + 11 - 1) + 1) && reg <= (((0x0 + 11 - 1) + 1) + 11 - 1)){
      if(old_val != new_val){
        regs[reg] = new_val;
        send_write_ddr(reg, new_val);
      }
    }else{
      regs[reg] = new_val;
    }
  }
  V(sem_regs);
  may_sleep();
}

int avr_millis(){
  printf("millis()\n");
  return 0;
}

void avr_delay(int ms) {
  printf("delay(%d)\n", ms);
  usleep((useconds_t) ms * 1000);
}

int avr_random(int max){
  return 0;
}

void avr_set_bit(uint8_t reg, uint8_t bit){

  init_simulator();
  P(sem_regs);
  uint8_t old_val = regs[reg];
  uint8_t mask = 1 << bit;
  uint8_t new_val = old_val | mask;
  if(reg >= 0x0 && reg <= (0x0 + 11 - 1)){
    if (old_val != new_val){
# 356 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
 regs[reg] = new_val;
 send_write_port(reg,new_val);

    }
  }
  else if (reg >= ((0x0 + 11 - 1) + 1) && reg <= (((0x0 + 11 - 1) + 1) + 11 - 1)){
    if(old_val != new_val){
      regs[reg] = new_val;
      send_write_ddr(reg,new_val);
    }
  }
  else if (reg >= ((((0x0 + 11 - 1) + 1) + 11 - 1) + 1) && reg <= (((((0x0 + 11 - 1) + 1) + 11 - 1) + 1) + 11 - 1)){
    char port_c = 'A' + reg - ((((0x0 + 11 - 1) + 1) + 11 - 1) + 1);
    fprintf(
# 369 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
           stderr
# 369 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                 , "Warning : PIN%c is only a read register, it shouldn't be written\n",
  port_c);
  }
  else{
  regs[reg] = new_val;

  }

  V(sem_regs);
  may_sleep();
}



int pic_tris_of_port(int port_or_bit){
# 395 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
  return 1;
}



static void out_write_port(int port, unsigned char new_val){
  P(sem_regs);
  {
    int ddr = port - 0x0 + ((0x0 + 11 - 1) + 1);
    int ddr_val = regs[ddr];
    int old_val = regs[port];
    if((new_val & ~ddr_val) != 0xFF){
      char port_c = 'A' + port - 0x0;
      fprintf(
# 408 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
             stderr
# 408 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                   ,
              "Warning: an outside component writes PORT%c=0x%02X when TRIS%c=0x%02X\n",
              port_c, new_val, port_c, ddr_val);
    }
    if(new_val != old_val){
      regs[port] = new_val;
      send_write_port(port, new_val);
    }
  }
  V(sem_regs);
  may_sleep();
}

static void out_clear_port_bit(int port, int bit){
  P(sem_regs);
  {
    int mask = 1 << bit;
    int ddr = port - 0x0 + ((0x0 + 11 - 1) + 1);
    int ddr_val = regs[ddr];
    int old_val = regs[port];
    int new_val = old_val & ~mask;
    if(ddr_val & mask){
      char port_c = 'A' + port - 0x0;
      fprintf(
# 431 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
             stderr
# 431 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                   ,
        "Warning: an outside component clears PORT%c.R%c%d when TRIS%c=0x%02X\n",
              port_c, port_c, bit, port_c, ddr_val);
    }
    if(old_val != new_val){
      regs[port] = new_val;
      send_write_port(port, new_val);
    }
  }
  V(sem_regs);
  may_sleep();
}

static void out_set_port_bit(int port, int bit){
  P(sem_regs);
  {
    int mask = 1 << bit;
    int ddr = port - 0x0 + ((0x0 + 11 - 1) + 1);
    int ddr_val = regs[ddr];
    int old_val = regs[port];
    int new_val = old_val | mask;
    if(ddr_val & mask){
      char port_c = 'A' + port - 0x0;
      fprintf(
# 454 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
             stderr
# 454 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                   ,
        "Warning: an outside component sets PORT%c.R%c%d when DDR%c=0x%02X\n",
              port_c, port_c, bit, port_c, ddr_val);
    }
    if(old_val != new_val){
      regs[port] = new_val;
      send_write_port(port, new_val);
    }
  }
  V(sem_regs);
  may_sleep();
}

static void out_set_analog(unsigned int chan, unsigned int val){
  P(sem_regs);
  {
    if(val != analogs[chan]){
      analogs[chan] = val;
      fprintf(
# 472 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
             stderr
# 472 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
                   ,"I put %d in analog %d", val, chan);
      send_set_analog(chan, val);
    }
  }
  V(sem_regs);
  may_sleep();
}



static void invalid_instr(char *instr){
  fprintf(
# 483 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c" 3 4
         stderr
# 483 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/sf-regs.c"
               , "Invalid instruction: '%s'\n", instr);
}

void exec_instr(char *instr, int size){
  if(size < 3){
    invalid_instr(instr);
  }else if((size == 4) &&
           (instr[0] == 'D' || instr[0] == 'd') &&
           (instr[1] == 'O' || instr[1] == 'o') &&
           (instr[2] == 'N' || instr[2] == 'n') &&
           (instr[3] == 'E' || instr[3] == 'e')){
    P(sem_sync);
    *sync_counter = *sync_counter - 1;
    if(*sync_counter == 0) V(sem_done);
    V(sem_sync);
  }else if(size == 5 && instr[0] == 'Z'){
    int chan, h2, h1, h0, val;
    chan = int_of_hexchar(instr[1]);
    if(chan == -1 || chan > 14){
      invalid_instr(instr);
      return;
    }
    h2 = int_of_hexchar(instr[2]);
    h1 = int_of_hexchar(instr[3]);
    h0 = int_of_hexchar(instr[4]);
    val = 16 * 16 * h2 + 16 * h1 + h0;
    if(h2 == -1 || h1 == -1 || h0 == -1 || val >= (1 << 10)){
      invalid_instr(instr);
      return;
    }
    out_set_analog(chan, val);
  }else{
    int port;
    if(instr[1] >= 'A' && instr[1] <= ('A' + (0x0 + 11 - 1) - 0x0)){
      port = instr[1] - 'A' + 0x0;
    }else if(instr[1] >= 'a' && instr[1] <= ('a' + (0x0 + 11 - 1) - 0x0)){
      port = instr[1] - 'a' + 0x0;
    }else{
      invalid_instr(instr);
      return;
    }
    switch(instr[0]){
    case 'W':
    case 'w':
      if(size != 4) invalid_instr(instr);
      else{
        int h1 = int_of_hexchar(instr[2]);
        int h0 = int_of_hexchar(instr[3]);
        if (h1 == -1 || h0 == -1) {
          invalid_instr(instr);
          return;
        }
        out_write_port(port, 16 * h1 + h0);
      }
    break;
    case 'C':
    case 'c':
      if(size != 3 || instr[2] < '0' || instr[2] > '7') invalid_instr(instr);
      else {
        out_clear_port_bit(port, instr[2] - '0');
      }
    break;
    case 'S':
    case 's':
      if(size != 3 || instr[2] < '0' || instr[2] > '7') invalid_instr(instr);
      else {
        out_set_port_bit(port, instr[2] - '0');
      }
    break;
    default:
      invalid_instr(instr);
    }
  }
}






void avr_adc_init(){
  printf("adc init\n");
  init_simulator();

}



uint16_t avr_analog_read(uint8_t ch){




  return analogs[ch];
}

void avr_serial_init(){
  init_simulator();
  printf("serial init\n");
  avr_set_bit(15,3);
}



char avr_serial_read(){
  printf("serial read\n");
  avr_set_bit(3,2);
  usleep(10000);
  avr_clear_bit(3,2);
  return '0';
}

void avr_serial_write(char c){
  printf("serial write(%c)\n",c);
  avr_set_bit(3,3);
  usleep(10000);
  avr_clear_bit(3,3);
}
# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c" 2

extern const char **global_argv;

void device_init(const char **argv) {
  global_argv = argv;
}





void device_finish() {



}





void uncaught_exception(value acc) {
  value str;
  int i;
  char c;
  if ((((uint8_t) (acc) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (acc) >> 22) == 0x01FF) && ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[-1]))) >> 24)) == 248 && ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF)) > 0 && (((uint8_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) >> 22) == 0x01FF) && ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) & 0x000FFFFF)))[-1]))) >> 24)) == 252) {
    str = ((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]));
  } else {
    str = ((0 || (((uint8_t) ((uint32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) & 0x000FFFFF)))[0]));
  }
  printf("Error: uncaught exception: ");
  i = 0;
  c = ((0 || (((uint8_t) ((uint32_t) (str) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (str) << 12) >> 12))))[0]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (str) & 0x000FFFFF))))[0]));
  while (c != '\0') {
    printf("%c", c);
    i ++;
    c = ((0 || (((uint8_t) ((uint32_t) (str) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (str) << 12) >> 12))))[i]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (str) & 0x000FFFFF))))[i]));
  }
  if ((((uint8_t) (acc) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (acc) >> 22) == 0x01FF) && ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[-1]))) >> 24)) == 0 && ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF)) > 1 && (((uint8_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[1]))) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[1]))) >> 22) == 0x01FF) && ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[1]))) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[1]))) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[1]))) & 0x000FFFFF)))[-1]))) >> 24)) == 252) {
    printf(" \"");
    str = ((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[1]));
    i = 0;
    c = ((0 || (((uint8_t) ((uint32_t) (str) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (str) << 12) >> 12))))[0]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (str) & 0x000FFFFF))))[0]));
    while (c != '\0') {
      printf("%c", c);
      i ++;
      c = ((0 || (((uint8_t) ((uint32_t) (str) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (str) << 12) >> 12))))[i]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (str) & 0x000FFFFF))))[i]));
    }
    printf("\"");
  }
  printf("\n");
}
# 70 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c"
void print_value(value v) {
  printf("0x%08" "" "x / ", v);
  if (32 != 16 && ((((uint8_t) (v) & 0x1) == 0x01) && ((uint32_t) (v) >> 30) == 0x2)) {
    printf("@%" "" "d (code pointer)", (((uint32_t) (v) >> 1) & 0x3FFFFFFF));
  } else if ((((uint8_t) (v) & 0x1) == 0x01)) {
    printf("(int = %" "" "d / float = %" "" "f)", ((int32_t) ((value) (v) >> 1)), (float_of_value(v)));
  } else if ((((uint8_t) (v) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v) >> 20) == 0x07FC)) {
    printf("@%p (block in dynamic heap)", ((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12))));
  } else if ((((uint8_t) (v) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v) >> 20) == 0x07FD)) {
    printf("@%p (block in static heap)", ((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12))));
  } else if ((((uint8_t) (v) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v) >> 20) == 0x07FE)) {
    printf("@%p (block in flash heap)", ((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF))));
  } else if (v == 0) {
    printf("NULL");
  } else if ((float_of_value(v)) >= -1e6 && (float_of_value(v)) <= 1e6) {
    printf("(maybe %f)", (float_of_value(v)));
  } else {
    printf("(?)");
  }
  printf("\n");
  fflush(
# 90 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c" 3 4
        stdout
# 90 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c"
              );
}

static void print_table(const char *name, const value *table, uint32_t table_wosize) {
  const value *ptr;
  int i;

  printf("%s (starts at %p, ends at %p, size = %" 
# 97 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c" 3 4
                                                 "u" 
# 97 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.c"
                                                        " words) : \n", name, table, table + table_wosize, table_wosize);

  for (ptr = table, i = 0; ptr < table + table_wosize; ptr ++, i ++) {





    printf("%d  @%p : ", i, ptr);
    print_value(*ptr);
  }
  printf("\n\n\n");
}

void print_dynamic_heap(void) {
  print_table("DYNAMIC HEAP", ocaml_ram_heap + 0, 200);
}

void print_static_heap(void) {
  print_table("STATIC HEAP", ocaml_ram_heap, 0);
}

void print_ram_global_data(void) {
  print_table("RAM GLOBAL DATA", ocaml_ram_global_data, 0);
}

extern value *sp;

void print_stack(void) {
  print_table("STACK", sp, 200 - (sp - ocaml_stack));
}

void print_flash_heap(void) {
  print_table("FLASH HEAP", ocaml_flash_heap, 55);
}

void print_flash_global_data(void) {
  print_table("FLASH GLOBAL DATA", ocaml_flash_global_data, 6);
}





static inline char do_read_byte(const opcode_t *ocaml_bytecode, int pc) {
  return ocaml_bytecode[pc];
}

static inline uint8_t do_read_byte_from_flash(const void *flash_ptr, int ind) {
  return ((uint8_t *) flash_ptr)[ind];
}

static inline void *do_get_primitive(void *const primitives[], uint8_t prim_ind) {
  return primitives[prim_ind];
}

static inline value do_read_flash_data_1B(const value flash_global_data[], uint8_t glob_ind) {
  return flash_global_data[glob_ind];
}

static inline value do_read_flash_data_2B(const value flash_global_data[], uint8_t glob_ind) {
  return flash_global_data[glob_ind];
}





void format_int64(char *buf, int bufsize, value v) {
  snprintf(buf, bufsize, "%ld", ((((uint8_t) (v) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[2])) << 32)));
}
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/debug.h" 1
# 17 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/debug.h"
void print_value(value v);
void print_dynamic_heap(void);
void print_static_heap(void);
void print_flash_heap(void);
void print_ram_global_data(void);
void print_flash_global_data(void);
void print_stack(void);
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/gc.h" 1





# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/gc.h" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/fail.h" 1



# 1 "/usr/include/setjmp.h" 1 3 4
# 27 "/usr/include/setjmp.h" 3 4

# 27 "/usr/include/setjmp.h" 3 4
extern "C" {

# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 30 "/usr/include/setjmp.h" 2 3 4



struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };


typedef struct __jmp_buf_tag jmp_buf[1];



extern int setjmp (jmp_buf __env) throw ();




extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask) throw ();



extern int _setjmp (struct __jmp_buf_tag __env[1]) throw ();
# 67 "/usr/include/setjmp.h" 3 4
extern void longjmp (struct __jmp_buf_tag __env[1], int __val)
     throw () __attribute__ ((__noreturn__));





extern void _longjmp (struct __jmp_buf_tag __env[1], int __val)
     throw () __attribute__ ((__noreturn__));







typedef struct __jmp_buf_tag sigjmp_buf[1];
# 93 "/usr/include/setjmp.h" 3 4
extern void siglongjmp (sigjmp_buf __env, int __val)
     throw () __attribute__ ((__noreturn__));





# 1 "/usr/include/x86_64-linux-gnu/bits/setjmp2.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/setjmp2.h" 3 4
extern void longjmp (struct __jmp_buf_tag __env[1], int __val) throw () __asm__ ("" "__longjmp_chk")

                        __attribute__ ((__noreturn__));
extern void _longjmp (struct __jmp_buf_tag __env[1], int __val) throw () __asm__ ("" "__longjmp_chk")

                        __attribute__ ((__noreturn__));
extern void siglongjmp (struct __jmp_buf_tag __env[1], int __val) throw () __asm__ ("" "__longjmp_chk")

                        __attribute__ ((__noreturn__));
# 101 "/usr/include/setjmp.h" 2 3 4


}
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/fail.h" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 6 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/fail.h" 2


# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/fail.h"
extern jmp_buf caml_exception_jmp_buf;

void caml_raise_out_of_memory(void);
void caml_raise_stack_overflow(void);
void caml_raise_division_by_zero(void);
void caml_raise_invalid_argument(char const *msg);
void caml_raise_failure(char const *msg);
void caml_raise_index_out_of_bounds(void);
# 8 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/gc.h" 2

extern uint32_t gc_count;
extern value *heap_ptr;
extern value *heap_end;

void gc_init(void);
void gc(void);
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 2

value caml_make_vect(value len, value init) {
  value res;
  mlsize_t size, i;
  size = ((int32_t) ((value) (len) >> 1));
  if (size == 0) {
    res = ((value) ((char *) (&ocaml_flash_heap[1]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000);
  } else {
    do { if (heap_ptr + (size) + 1 > heap_end) { gc(); if (heap_ptr + (size) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((0))) << 24) | (((uvalue) ((size))) << 2) | ((uvalue) (0)))); heap_ptr ++; (res) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (size); } while(0);
    for (i = 0; i < size; i ++) {
      (((value *) ((char *) ocaml_ram_heap + (((int32_t) (res) << 12) >> 12)))[i]) = init;
    }
  }
  return res;
}

value caml_make_array(value init) {
  return init;
}

value caml_array_get_addr(value array, value index) {
  mlsize_t idx = ((int32_t) ((value) (index) >> 1));
  
# 25 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 (static_cast <bool> (
# 25 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 (((uint8_t) (array) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (array) >> 22) == 0x01FF)
# 25 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 ) ? void (0) : __assert_fail (
# 25 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 "Is_block(array)"
# 25 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c", 25, __extension__ __PRETTY_FUNCTION__))
# 25 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
                        ;
  if (idx >= ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (array) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (array) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (array) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF))) caml_raise_index_out_of_bounds();
  return ((0 || (((uint8_t) ((uint32_t) (array) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (array) << 12) >> 12)))[idx]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (array) & 0x000FFFFF)))[idx]));
}

value caml_array_set_addr(value array, value index, value newval) {
  mlsize_t idx = ((int32_t) ((value) (index) >> 1));
  
# 32 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 (static_cast <bool> (
# 32 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 (((uint8_t) (array) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (array) >> 22) == 0x01FF)
# 32 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 ) ? void (0) : __assert_fail (
# 32 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 "Is_block(array)"
# 32 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c", 32, __extension__ __PRETTY_FUNCTION__))
# 32 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
                        ;
  
# 33 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 (static_cast <bool> (
# 33 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 (0 || (((uint8_t) ((uint32_t) (array) >> 16)) & 0x20) == 0x00)
# 33 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 ) ? void (0) : __assert_fail (
# 33 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 "Is_in_ram(array)"
# 33 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c", 33, __extension__ __PRETTY_FUNCTION__))
# 33 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
                         ;
  if (idx >= ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (array) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (array) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (array) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF))) caml_raise_index_out_of_bounds();
  (((value *) ((char *) ocaml_ram_heap + (((int32_t) (array) << 12) >> 12)))[idx]) = newval;
  return ((value) 0x1);
}

value caml_array_unsafe_get(value array, value index) {
  
# 40 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 (static_cast <bool> (
# 40 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 (((uint8_t) (array) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (array) >> 22) == 0x01FF)
# 40 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 ) ? void (0) : __assert_fail (
# 40 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 "Is_block(array)"
# 40 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c", 40, __extension__ __PRETTY_FUNCTION__))
# 40 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
                        ;
  return ((0 || (((uint8_t) ((uint32_t) (array) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (array) << 12) >> 12)))[((int32_t) ((value) (index) >> 1))]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (array) & 0x000FFFFF)))[((int32_t) ((value) (index) >> 1))]));
}

value caml_array_unsafe_set(value array, value index, value val) {
  
# 45 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 (static_cast <bool> (
# 45 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 (((uint8_t) (array) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (array) >> 22) == 0x01FF)
# 45 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 ) ? void (0) : __assert_fail (
# 45 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 "Is_block(array)"
# 45 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c", 45, __extension__ __PRETTY_FUNCTION__))
# 45 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
                        ;
  
# 46 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 (static_cast <bool> (
# 46 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 (0 || (((uint8_t) ((uint32_t) (array) >> 16)) & 0x20) == 0x00)
# 46 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 ) ? void (0) : __assert_fail (
# 46 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
 "Is_in_ram(array)"
# 46 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c", 46, __extension__ __PRETTY_FUNCTION__))
# 46 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/array.c"
                         ;
  (((value *) ((char *) ocaml_ram_heap + (((int32_t) (array) << 12) >> 12)))[((int32_t) ((value) (index) >> 1))]) = val;
  return ((value) 0x1);
}

value caml_array_get(value array, value index) {
  return caml_array_get_addr(array, index);
}

value caml_array_set(value array, value index, value val) {
  return caml_array_set_addr(array, index, val);
}

value caml_floatarray_set(value array, value index, value val) {
  return caml_array_set_addr(array, index, val);
}

value caml_floatarray_get(value array, value index) {
  return caml_array_get_addr(array, index);
}


value caml_array_sub(value array, value ml_ofs, value ml_len) {
  mlsize_t ofs = ((int32_t) ((value) (ml_ofs) >> 1));
  mlsize_t len = ((int32_t) ((value) (ml_len) >> 1));
  value result;
  mlsize_t i;
  do { if (heap_ptr + (len) + 1 > heap_end) { gc(); if (heap_ptr + (len) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((0))) << 24) | (((uvalue) ((len))) << 2) | ((uvalue) (0)))); heap_ptr ++; (result) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (len); } while(0);
  for (i = 0; i < len; i ++) {
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (result) << 12) >> 12)))[i]) = ((0 || (((uint8_t) ((uint32_t) (array) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (array) << 12) >> 12)))[i + ofs]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (array) & 0x000FFFFF)))[i + ofs]));
  }
  return result;
}

value caml_array_append(value tbl1, value tbl2) {
  mlsize_t sz1 = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (tbl1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (tbl1) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (tbl1) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
  mlsize_t sz2 = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (tbl2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (tbl2) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (tbl2) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
  value result;
  mlsize_t i;
  do { if (heap_ptr + (sz1 + sz2) + 1 > heap_end) { gc(); if (heap_ptr + (sz1 + sz2) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((0))) << 24) | (((uvalue) ((sz1 + sz2))) << 2) | ((uvalue) (0)))); heap_ptr ++; (result) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (sz1 + sz2); } while(0);
  for (i = 0; i < sz1; i ++) {
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (result) << 12) >> 12)))[i]) = ((0 || (((uint8_t) ((uint32_t) (tbl1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (tbl1) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (tbl1) & 0x000FFFFF)))[i]));
  }
  for (i = 0; i < sz2; i ++) {
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (result) << 12) >> 12)))[i + sz1]) = ((0 || (((uint8_t) ((uint32_t) (tbl2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (tbl2) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (tbl2) & 0x000FFFFF)))[i]));
  }
  return result;
}

value caml_array_blit(value tbl1, value ml_ofs1, value tbl2, value ml_ofs2, value ml_n) {
  value i, n = ((int32_t) ((value) (ml_n) >> 1)), ofs1 = ((int32_t) ((value) (ml_ofs1) >> 1)), ofs2 = ((int32_t) ((value) (ml_ofs2) >> 1));
  for (i = 0; i < n; i ++) {
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (tbl2) << 12) >> 12)))[ofs2 + i]) = ((0 || (((uint8_t) ((uint32_t) (tbl1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (tbl1) << 12) >> 12)))[ofs1 + i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (tbl1) & 0x000FFFFF)))[ofs1 + i]));
  }
  return ((value) 0x1);
}
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/compare.c" 1





# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/compare.c" 2


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.h" 1



# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.h" 2

mlsize_t string_length(value s);
int string_compare(value s1, value s2);
value copy_bytes(const char *str);

value caml_create_bytes(value len);
value caml_string_length(value s);
value caml_ml_string_length(value s);
value caml_ml_bytes_length(value b);
value caml_blit_string(value s, value sofs, value b, value bofs, value len);
value caml_blit_bytes(value in, value inofs, value out, value outofs, value len);
value caml_fill_bytes(value b, value ofs, value len, value c);
value caml_string_equal(value s1, value s2);
value caml_bytes_equal(value s1, value s2);
value caml_string_notequal(value s1, value s2);
value caml_string_compare(value s1, value s2);
value caml_bytes_compare(value b1, value b2);
# 10 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/compare.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int32.h" 1

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int32.h" 2

int8_t int32_compare(value v0, value v1);
# 11 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/compare.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int64.h" 1

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int64.h" 2

int8_t int64_compare(value v0, value v1);
# 12 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/compare.c" 2



static int8_t compare_customs(uint8_t flag, value v1, value v2) {
  if (flag == 132) {
    return int32_compare(v1, v2);
  } else if (flag == 164) {
    return int64_compare(v1, v2);
  } else {
    caml_raise_invalid_argument("compare: unknown custom blocks");
    return 0;
  }
}





static int8_t compare_val(value v1, value v2, bool total) {
  if (v1 == v2 && total) {
    return 0;
  }

  if ((((uint8_t) (v1) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v1) >> 22) == 0x01FF)) {
    if ((((uint8_t) (v2) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v2) >> 22) == 0x01FF)) {
      tag_t t1 = ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[-1]))) >> 24));
      tag_t t2 = ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (v2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v2) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v2) & 0x000FFFFF)))[-1]))) >> 24));
      if (t1 < t2) return -1;
      if (t1 > t2) return 1;

      switch(t1) {
      case 252:
        return string_compare(v1, v2);

      case 251:
        caml_raise_invalid_argument("compare: abstract value");

      case 247:
      case 249:
        caml_raise_invalid_argument("compare: functional value");

      case 248:
        return ((int32_t) ((value) (((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) >> 1)) - ((int32_t) ((value) (((0 || (((uint8_t) ((uint32_t) (v2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v2) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v2) & 0x000FFFFF)))[1]))) >> 1));

      case 255: {
        unsigned char flag1 = ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[0]));
        unsigned char flag2 = ((0 || (((uint8_t) ((uint32_t) (v2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v2) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v2) & 0x000FFFFF)))[0]));
        if (flag1 < flag2) return -1;
        if (flag1 > flag2) return 1;
        return compare_customs(flag1, v1, v2);
      }

      default: {
        mlsize_t sz1 = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
        mlsize_t sz2 = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (v2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v2) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v2) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
        mlsize_t i;
        int res;
        if (sz1 < sz2) return -1;
        if (sz1 > sz2) return 1;
        if (sz1 == 0) return 0;
        for (i = 0; i < sz1 - 1; i ++) {
          res = compare_val(((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[i])), ((0 || (((uint8_t) ((uint32_t) (v2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v2) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v2) & 0x000FFFFF)))[i])), total);
          if (res != 0) return res;
        }
        return compare_val(((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[sz1 - 1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[sz1 - 1])), ((0 || (((uint8_t) ((uint32_t) (v2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v2) << 12) >> 12)))[sz2 - 1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v2) & 0x000FFFFF)))[sz2 - 1])), total);
      }
      }
    } else {
      if (((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[-1]))) >> 24)) == 255) return compare_customs(((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[0])), v1, v2);
      return 1;
    }
  } else if ((((uint8_t) (v2) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v2) >> 22) == 0x01FF)) {
    if (((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (v2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v2) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v2) & 0x000FFFFF)))[-1]))) >> 24)) == 255) return compare_customs(((0 || (((uint8_t) ((uint32_t) (v2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v2) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v2) & 0x000FFFFF)))[0])), v1, v2);
    return -1;
  } else if (v1 == ((value) 0x7FA00000)) {
    return total ? -1 : 2;
  } else if (v2 == ((value) 0x7FA00000)) {
    return total ? 1 : 2;
  } else if ((v1 == ((value) 0xFFFFFFFF) && v2 == ((value) 0x00000000)) || (v2 == ((value) 0x00000000) && v2 == ((value) 0xFFFFFFFF))) {
    return 0;
  } else {
    return v1 < v2 ? -1 : v1 > v2 ? 1 : 0;
  }
}



value caml_equal(value v1, value v2) {
  int8_t res = compare_val(v1, v2, false);
  return ((value) (((uint32_t) (int32_t) (res == 0) << 1) | 1));
}

value caml_notequal(value v1, value v2) {
  int8_t res = compare_val(v1, v2, false);
  return ((value) (((uint32_t) (int32_t) (res != 0) << 1) | 1));
}

value caml_lessthan(value v1, value v2) {
  int8_t res = compare_val(v1, v2, false);
  return ((value) (((uint32_t) (int32_t) (res < 0) << 1) | 1));
}

value caml_lessequal(value v1, value v2) {
  int8_t res = compare_val(v1, v2, false);
  return ((value) (((uint32_t) (int32_t) (res <= 0) << 1) | 1));
}

value caml_greaterthan(value v1, value v2) {
  int8_t res = compare_val(v1, v2, false);
  return ((value) (((uint32_t) (int32_t) (res > 0 && res != 2) << 1) | 1));
}

value caml_greaterequal(value v1, value v2) {
  int8_t res = compare_val(v1, v2, false);
  return ((value) (((uint32_t) (int32_t) (res >= 0 && res != 2) << 1) | 1));
}

value caml_compare(value v1, value v2) {
  int8_t res = compare_val(v1, v2, true);
  return ((value) (((uint32_t) (int32_t) (res) << 1) | 1));
}



value caml_int_compare(value v1, value v2) {
  return v1 < v2 ? ((value) (((uint32_t) (int32_t) (-1) << 1) | 1)) : v1 > v2 ? ((value) (((uint32_t) (int32_t) (1) << 1) | 1)) : ((value) (((uint32_t) (int32_t) (0) << 1) | 1));
}
# 6 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/fail.c" 1



# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/fail.c" 2





jmp_buf caml_exception_jmp_buf;

void caml_raise(value v) {
  acc = v;
  longjmp(caml_exception_jmp_buf, 1);
}



void caml_raise_out_of_memory(void) {
  caml_raise(((value) ((char *) (&ocaml_flash_heap[2]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000));
}

void caml_raise_stack_overflow(void) {
  caml_raise(((value) ((char *) (&ocaml_flash_heap[34]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000));
}

void caml_raise_division_by_zero(void) {
  caml_raise(((value) ((char *) (&ocaml_flash_heap[25]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000));
}



static void caml_raise_exception_with_string(value exn, char const *msg) {
  mlsize_t msg_len = strlen(msg);
  value block;
  mlsize_t str_wosize = ((msg_len) >> 2) + 1;
  mlsize_t str_bosize = ((str_wosize) << 2);
  do { if (heap_ptr + (str_wosize + 3) + 1 > heap_end) { gc(); if (heap_ptr + (str_wosize + 3) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((252))) << 24) | (((uvalue) ((str_wosize + 3))) << 2) | ((uvalue) (0)))); heap_ptr ++; (block) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (str_wosize + 3); } while(0);
  if (block == 0) {
    caml_raise_out_of_memory();
  } else {
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (block) << 12) >> 12)))[-1]) = ((value) ((((uvalue) (252)) << 24) | (((uvalue) (str_wosize)) << 2) | ((uvalue) (0))));
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (block) << 12) >> 12)))[str_wosize - 1]) = 0;
    memcpy(((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (block) << 12) >> 12)))), msg, msg_len);
    ((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (block) << 12) >> 12))))[str_bosize - 1] = str_bosize - msg_len - 1;
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (block) << 12) >> 12)))[str_wosize]) = ((value) ((((uvalue) (0)) << 24) | (((uvalue) (2)) << 2) | ((uvalue) (0))));
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (block) << 12) >> 12)))[str_wosize + 1]) = exn;
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (block) << 12) >> 12)))[str_wosize + 2]) = block;
    caml_raise(((value) ((char *) (&(((value *) ((char *) ocaml_ram_heap + (((int32_t) (block) << 12) >> 12)))[str_wosize + 1])) - (char *) ocaml_ram_heap) | (value) 0x7FC00000));
  }
}

void caml_raise_invalid_argument(char const *msg) {
  caml_raise_exception_with_string(((value) ((char *) (&ocaml_flash_heap[16]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000), msg);
}

void caml_raise_failure(char const *msg) {
  caml_raise_exception_with_string(((value) ((char *) (&ocaml_flash_heap[10]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000), msg);
}



void caml_raise_index_out_of_bounds(void) {
  caml_raise_invalid_argument("index out of bounds");
}
# 7 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/float.c" 1

# 1 "/usr/include/c++/7/math.h" 1 3
# 36 "/usr/include/c++/7/math.h" 3
# 1 "/usr/include/c++/7/cmath" 1 3
# 39 "/usr/include/c++/7/cmath" 3
       
# 40 "/usr/include/c++/7/cmath" 3


# 1 "/usr/include/c++/7/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
# 67 "/usr/include/c++/7/bits/cpp_type_traits.h" 3

# 67 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 278 "/usr/include/c++/7/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/usr/include/c++/7/cmath" 2 3
# 1 "/usr/include/c++/7/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/7/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/7/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/usr/include/c++/7/cmath" 2 3

# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                        ;




extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ()
                               ;


extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int totalorder (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermag (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ()
                                                        ;




extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (const char *__tagb) throw () __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ()
                               ;


extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int totalorderf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                        ;




extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (const char *__tagb) throw () __attribute__ ((__const__));
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ()
                               ;


extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int totalorderl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


 extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

 extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ()
                                                        ;




extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





 extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


 extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float32 __nanf32 (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int totalorderf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


 extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

 extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ()
                                                        ;




extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





 extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


 extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float64 __nanf64 (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int totalorderf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 420 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) throw ();


extern int __issignalingf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));
# 421 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 acosf128 (_Float128 __x) throw (); extern _Float128 __acosf128 (_Float128 __x) throw ();

extern _Float128 asinf128 (_Float128 __x) throw (); extern _Float128 __asinf128 (_Float128 __x) throw ();

extern _Float128 atanf128 (_Float128 __x) throw (); extern _Float128 __atanf128 (_Float128 __x) throw ();

extern _Float128 atan2f128 (_Float128 __y, _Float128 __x) throw (); extern _Float128 __atan2f128 (_Float128 __y, _Float128 __x) throw ();


 extern _Float128 cosf128 (_Float128 __x) throw (); extern _Float128 __cosf128 (_Float128 __x) throw ();

 extern _Float128 sinf128 (_Float128 __x) throw (); extern _Float128 __sinf128 (_Float128 __x) throw ();

extern _Float128 tanf128 (_Float128 __x) throw (); extern _Float128 __tanf128 (_Float128 __x) throw ();




extern _Float128 coshf128 (_Float128 __x) throw (); extern _Float128 __coshf128 (_Float128 __x) throw ();

extern _Float128 sinhf128 (_Float128 __x) throw (); extern _Float128 __sinhf128 (_Float128 __x) throw ();

extern _Float128 tanhf128 (_Float128 __x) throw (); extern _Float128 __tanhf128 (_Float128 __x) throw ();



 extern void sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) throw (); extern void __sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) throw ()
                                                        ;




extern _Float128 acoshf128 (_Float128 __x) throw (); extern _Float128 __acoshf128 (_Float128 __x) throw ();

extern _Float128 asinhf128 (_Float128 __x) throw (); extern _Float128 __asinhf128 (_Float128 __x) throw ();

extern _Float128 atanhf128 (_Float128 __x) throw (); extern _Float128 __atanhf128 (_Float128 __x) throw ();





 extern _Float128 expf128 (_Float128 __x) throw (); extern _Float128 __expf128 (_Float128 __x) throw ();


extern _Float128 frexpf128 (_Float128 __x, int *__exponent) throw (); extern _Float128 __frexpf128 (_Float128 __x, int *__exponent) throw ();


extern _Float128 ldexpf128 (_Float128 __x, int __exponent) throw (); extern _Float128 __ldexpf128 (_Float128 __x, int __exponent) throw ();


 extern _Float128 logf128 (_Float128 __x) throw (); extern _Float128 __logf128 (_Float128 __x) throw ();


extern _Float128 log10f128 (_Float128 __x) throw (); extern _Float128 __log10f128 (_Float128 __x) throw ();


extern _Float128 modff128 (_Float128 __x, _Float128 *__iptr) throw (); extern _Float128 __modff128 (_Float128 __x, _Float128 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float128 exp10f128 (_Float128 __x) throw (); extern _Float128 __exp10f128 (_Float128 __x) throw ();




extern _Float128 expm1f128 (_Float128 __x) throw (); extern _Float128 __expm1f128 (_Float128 __x) throw ();


extern _Float128 log1pf128 (_Float128 __x) throw (); extern _Float128 __log1pf128 (_Float128 __x) throw ();


extern _Float128 logbf128 (_Float128 __x) throw (); extern _Float128 __logbf128 (_Float128 __x) throw ();




extern _Float128 exp2f128 (_Float128 __x) throw (); extern _Float128 __exp2f128 (_Float128 __x) throw ();


extern _Float128 log2f128 (_Float128 __x) throw (); extern _Float128 __log2f128 (_Float128 __x) throw ();






 extern _Float128 powf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __powf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float128 sqrtf128 (_Float128 __x) throw (); extern _Float128 __sqrtf128 (_Float128 __x) throw ();



extern _Float128 hypotf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __hypotf128 (_Float128 __x, _Float128 __y) throw ();




extern _Float128 cbrtf128 (_Float128 __x) throw (); extern _Float128 __cbrtf128 (_Float128 __x) throw ();






extern _Float128 ceilf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __ceilf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 fabsf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __fabsf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 floorf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __floorf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 fmodf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __fmodf128 (_Float128 __x, _Float128 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 copysignf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __copysignf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));




extern _Float128 nanf128 (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float128 __nanf128 (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 j0f128 (_Float128) throw (); extern _Float128 __j0f128 (_Float128) throw ();
extern _Float128 j1f128 (_Float128) throw (); extern _Float128 __j1f128 (_Float128) throw ();
extern _Float128 jnf128 (int, _Float128) throw (); extern _Float128 __jnf128 (int, _Float128) throw ();
extern _Float128 y0f128 (_Float128) throw (); extern _Float128 __y0f128 (_Float128) throw ();
extern _Float128 y1f128 (_Float128) throw (); extern _Float128 __y1f128 (_Float128) throw ();
extern _Float128 ynf128 (int, _Float128) throw (); extern _Float128 __ynf128 (int, _Float128) throw ();





extern _Float128 erff128 (_Float128) throw (); extern _Float128 __erff128 (_Float128) throw ();
extern _Float128 erfcf128 (_Float128) throw (); extern _Float128 __erfcf128 (_Float128) throw ();
extern _Float128 lgammaf128 (_Float128) throw (); extern _Float128 __lgammaf128 (_Float128) throw ();




extern _Float128 tgammaf128 (_Float128) throw (); extern _Float128 __tgammaf128 (_Float128) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 lgammaf128_r (_Float128, int *__signgamp) throw (); extern _Float128 __lgammaf128_r (_Float128, int *__signgamp) throw ();






extern _Float128 rintf128 (_Float128 __x) throw (); extern _Float128 __rintf128 (_Float128 __x) throw ();


extern _Float128 nextafterf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __nextafterf128 (_Float128 __x, _Float128 __y) throw ();






extern _Float128 nextdownf128 (_Float128 __x) throw (); extern _Float128 __nextdownf128 (_Float128 __x) throw ();

extern _Float128 nextupf128 (_Float128 __x) throw (); extern _Float128 __nextupf128 (_Float128 __x) throw ();



extern _Float128 remainderf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __remainderf128 (_Float128 __x, _Float128 __y) throw ();



extern _Float128 scalbnf128 (_Float128 __x, int __n) throw (); extern _Float128 __scalbnf128 (_Float128 __x, int __n) throw ();



extern int ilogbf128 (_Float128 __x) throw (); extern int __ilogbf128 (_Float128 __x) throw ();




extern long int llogbf128 (_Float128 __x) throw (); extern long int __llogbf128 (_Float128 __x) throw ();




extern _Float128 scalblnf128 (_Float128 __x, long int __n) throw (); extern _Float128 __scalblnf128 (_Float128 __x, long int __n) throw ();



extern _Float128 nearbyintf128 (_Float128 __x) throw (); extern _Float128 __nearbyintf128 (_Float128 __x) throw ();



extern _Float128 roundf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __roundf128 (_Float128 __x) throw () __attribute__ ((__const__));



extern _Float128 truncf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __truncf128 (_Float128 __x) throw () __attribute__ ((__const__));




extern _Float128 remquof128 (_Float128 __x, _Float128 __y, int *__quo) throw (); extern _Float128 __remquof128 (_Float128 __x, _Float128 __y, int *__quo) throw ();






extern long int lrintf128 (_Float128 __x) throw (); extern long int __lrintf128 (_Float128 __x) throw ();
__extension__
extern long long int llrintf128 (_Float128 __x) throw (); extern long long int __llrintf128 (_Float128 __x) throw ();



extern long int lroundf128 (_Float128 __x) throw (); extern long int __lroundf128 (_Float128 __x) throw ();
__extension__
extern long long int llroundf128 (_Float128 __x) throw (); extern long long int __llroundf128 (_Float128 __x) throw ();



extern _Float128 fdimf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __fdimf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float128 fmaxf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fmaxf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fminf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fminf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) throw (); extern _Float128 __fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) throw ();




extern _Float128 roundevenf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __roundevenf128 (_Float128 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float128 fmaxmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fmaxmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fminmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fminmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern int totalorderf128 (_Float128 __x, _Float128 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf128 (_Float128 __x, _Float128 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef128 (_Float128 *__cx, const _Float128 *__x) throw ();


extern _Float128 getpayloadf128 (const _Float128 *__x) throw (); extern _Float128 __getpayloadf128 (const _Float128 *__x) throw ();


extern int setpayloadf128 (_Float128 *__x, _Float128 __payload) throw ();


extern int setpayloadsigf128 (_Float128 *__x, _Float128 __payload) throw ();
# 424 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


 extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

 extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ()
                                                        ;




extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





 extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


 extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float32x __nanf32x (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int totalorderf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


 extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

 extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ()
                                                        ;




extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





 extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


 extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw () __attribute__ ((__const__)); extern _Float64x __nanf64x (const char *__tagb) throw () __attribute__ ((__const__));
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int totalorderf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 489 "/usr/include/math.h" 3 4
extern int signgam;
# 569 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 684 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }

inline int iscanonical (_Float128 __val) { return ((void) (__typeof (__val)) (__val), 1); }

}
# 685 "/usr/include/math.h" 2 3 4
# 696 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}

inline int issignaling (_Float128 __val) { return __issignalingf128 (__val); }

}
# 725 "/usr/include/math.h" 3 4
extern "C++" {
# 754 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 952 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathinline.h" 1 3 4
# 953 "/usr/include/math.h" 2 3 4
# 1205 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (double __x, double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};


template<> struct __iseqsig_type<_Float128>
{
  static int __call (_Float128 __x, _Float128 __y) throw ()
  {
    return __iseqsigf128 (__x, __y);
  }
};


template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/usr/include/c++/7/cmath" 2 3
# 77 "/usr/include/c++/7/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/usr/include/c++/7/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 536 "/usr/include/c++/7/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{





  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 957 "/usr/include/c++/7/cmath" 3

}
# 1075 "/usr/include/c++/7/cmath" 3
namespace std __attribute__ ((__visibility__ ("default")))
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }



}
# 1917 "/usr/include/c++/7/cmath" 3
}
# 37 "/usr/include/c++/7/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/float.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/float.c" 2
# 80 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/float.c"

# 80 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/float.c"
union float_or_value { float f; value v; };




value value_of_float(float x) {
  if (x != x) {
    return ((value) 0x7FA00000);
  } else if (x == 0.) {
    return copysignf(1., x) > 0 ? ((value) 0x00000000) : ((value) 0xFFFFFFFF);
  } else {
    value v = (((union float_or_value) { .f = (x) }).v);
    if (v < 0) {
      return v ^ 0x7FFFFFFF;
    } else {
      return v;
    }
  }
}

float float_of_value(value v) {
  if (v == ((value) 0xFFFFFFFF)) {
    return -0.;
  } else if (v < 0) {
    return (((union float_or_value) { .v = (v ^ 0x7FFFFFFF) }).f);
  } else {
    return (((union float_or_value) { .v = (v) }).f);
  }
}
# 152 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/float.c"
value caml_neq_float(value v1, value v2) {
  return ((uint8_t) ((float_of_value(v1)) != (float_of_value(v2))) != 0 ? 0x3 : 0x1);
}

value caml_eq_float(value v1, value v2) {
  return ((uint8_t) ((float_of_value(v1)) == (float_of_value(v2))) != 0 ? 0x3 : 0x1);
}

value caml_le_float(value v1, value v2) {
  return ((uint8_t) ((float_of_value(v1)) <= (float_of_value(v2))) != 0 ? 0x3 : 0x1);
}

value caml_lt_float(value v1, value v2) {
  return ((uint8_t) ((float_of_value(v1)) < (float_of_value(v2))) != 0 ? 0x3 : 0x1);
}

value caml_ge_float(value v1, value v2) {
  return ((uint8_t) ((float_of_value(v1)) >= (float_of_value(v2))) != 0 ? 0x3 : 0x1);
}

value caml_gt_float(value v1, value v2) {
  return ((uint8_t) ((float_of_value(v1)) > (float_of_value(v2))) != 0 ? 0x3 : 0x1);
}

value caml_float_compare(value v1, value v2) {
  if (v1 == v2) return ((value) (((uint32_t) (int32_t) (0) << 1) | 1));
  if (v1 == ((value) 0x7FA00000)) return ((value) (((uint32_t) (int32_t) (-1) << 1) | 1));
  if (v2 == ((value) 0x7FA00000)) return ((value) (((uint32_t) (int32_t) (1) << 1) | 1));
  if (v1 == ((value) 0x00000000) && v2 == ((value) 0xFFFFFFFF)) return ((value) (((uint32_t) (int32_t) (0) << 1) | 1));
  if (v1 == ((value) 0xFFFFFFFF) && v2 == ((value) 0x00000000)) return ((value) (((uint32_t) (int32_t) (0) << 1) | 1));
  return v1 < v2 ? ((value) (((uint32_t) (int32_t) (-1) << 1) | 1)) : ((value) (((uint32_t) (int32_t) (1) << 1) | 1));
}

value caml_cos_float(value v) {
  return (value_of_float(cos((float_of_value(v)))));
}

value caml_sin_float(value v) {
  return (value_of_float(sin((float_of_value(v)))));
}

value caml_abs_float(value v) {
  return (value_of_float(fabs((float_of_value(v)))));
}

value caml_sqrt_float(value v) {
  return (value_of_float(sqrt((float_of_value(v)))));
}

value caml_atan2_float(value v, value w) {
  return (value_of_float(atan2((float_of_value(v)), (float_of_value(w)))));
}

value caml_neg_float(value v) {
  return (value_of_float(-(float_of_value(v))));
}

value caml_add_float(value v1, value v2) {
  return (value_of_float((float_of_value(v1)) + (float_of_value(v2))));
}

value caml_mul_float(value v1, value v2) {
  return (value_of_float((float_of_value(v1)) * (float_of_value(v2))));
}

value caml_div_float(value v1, value v2) {
  return (value_of_float((float_of_value(v1)) / (float_of_value(v2))));
}

value caml_sub_float(value v1, value v2){
  return (value_of_float((float_of_value(v1)) - (float_of_value(v2))));
}

value caml_float_of_int(value i) {
  return (value_of_float(((int32_t) ((value) (i) >> 1))));
}

value caml_int_of_float(value x) {
  return ((value) (((uint32_t) (int32_t) ((float_of_value(x))) << 1) | 1));
}
# 8 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 1


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 2

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.h" 1



value caml_obj_dup(value arg);
# 6 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 2

value caml_obj_dup(value arg) {
  mlsize_t sz = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (arg) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (arg) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (arg) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
  if (sz == 0) {
    return arg;
  } else {
    value res;
    tag_t tg = ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (arg) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (arg) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (arg) & 0x000FFFFF)))[-1]))) >> 24));
    mlsize_t i;
    do { if (heap_ptr + (sz) + 1 > heap_end) { gc(); if (heap_ptr + (sz) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((tg))) << 24) | (((uvalue) ((sz))) << 2) | ((uvalue) (0)))); heap_ptr ++; (res) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (sz); } while(0);
    for (i = 0; i < sz; i ++) {
      (((value *) ((char *) ocaml_ram_heap + (((int32_t) (res) << 12) >> 12)))[i]) = ((0 || (((uint8_t) ((uint32_t) (arg) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (arg) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (arg) & 0x000FFFFF)))[i]));
    }
    return res;
  }
}

value caml_obj_block(value tag, value size) {
  value res;
  mlsize_t sz, i;
  tag_t tg;

  sz = ((int32_t) ((value) (size) >> 1));
  tg = ((int32_t) ((value) (tag) >> 1));
  if (sz == 0) {
    
# 31 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
   (static_cast <bool> (
# 31 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
   tg == 0
# 31 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
   ) ? void (0) : __assert_fail (
# 31 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
   "tg == 0"
# 31 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
   , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c", 31, __extension__ __PRETTY_FUNCTION__))
# 31 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
                  ;
    return ((value) ((char *) (&ocaml_flash_heap[1]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000);
  } else {
    do { if (heap_ptr + (sz) + 1 > heap_end) { gc(); if (heap_ptr + (sz) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((tg))) << 24) | (((uvalue) ((sz))) << 2) | ((uvalue) (0)))); heap_ptr ++; (res) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (sz); } while(0);
    for (i = 0; i < sz; i++) {
      (((value *) ((char *) ocaml_ram_heap + (((int32_t) (res) << 12) >> 12)))[i]) = ((value) (((uint32_t) (int32_t) (0) << 1) | 1));
    }
    return res;
  }
}

value caml_alloc_dummy(value ml_size) {
  mlsize_t size = ((int32_t) ((value) (ml_size) >> 1));
  if (size == 0) {
    return ((value) ((char *) (&ocaml_flash_heap[1]) - (char *) ocaml_flash_heap) | (value) 0x7FE00000);
  } else {
    value res;
    mlsize_t i;
    do { if (heap_ptr + (size) + 1 > heap_end) { gc(); if (heap_ptr + (size) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((0))) << 24) | (((uvalue) ((size))) << 2) | ((uvalue) (0)))); heap_ptr ++; (res) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (size); } while(0);
    for (i = 0; i < size; i ++) {


      (((value *) ((char *) ocaml_ram_heap + (((int32_t) (res) << 12) >> 12)))[i]) = ((value) ((((uvalue) (0)) << 24) | (((uvalue) (0)) << 2) | ((uvalue) (0))));
    }
    return res;
  }
}

value caml_alloc_dummy_function(value ml_size, value ml_arity) {
  return caml_alloc_dummy(ml_size);
}

value caml_update_dummy(value dummy, value newval) {
  mlsize_t i, size = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (newval) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (newval) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (newval) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
  
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
 (static_cast <bool> (
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
 size <= ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (dummy) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (dummy) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (dummy) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF))
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
 ) ? void (0) : __assert_fail (
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
 "size <= Wosize_val(dummy)"
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c", 65, __extension__ __PRETTY_FUNCTION__))
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
                                  ;
  
# 66 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
 (static_cast <bool> (
# 66 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
 (0 || (((uint8_t) ((uint32_t) (dummy) >> 16)) & 0x20) == 0x00)
# 66 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
 ) ? void (0) : __assert_fail (
# 66 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
 "Is_in_ram(dummy)"
# 66 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c", 66, __extension__ __PRETTY_FUNCTION__))
# 66 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/obj.c"
                         ;
  (((value *) ((char *) ocaml_ram_heap + (((int32_t) (dummy) << 12) >> 12)))[-1]) = ((0 || (((uint8_t) ((uint32_t) (newval) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (newval) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (newval) & 0x000FFFFF)))[-1]));
  for (i = 0; i < size; i ++) {
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (dummy) << 12) >> 12)))[i]) = ((0 || (((uint8_t) ((uint32_t) (newval) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (newval) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (newval) & 0x000FFFFF)))[i]));
  }
  return ((value) 0x1);
}
# 9 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/oo.c" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/oo.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/oo.h" 1



value caml_fresh_oo_id (value v);
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/oo.c" 2

static value oo_last_id = ((value) (((uint32_t) (int32_t) (1) << 1) | 1));

value caml_fresh_oo_id (value v) {
  v = oo_last_id;
  oo_last_id += 2;
  return v;
}

value caml_set_oo_id(value obj) {
  (((value *) ((char *) ocaml_ram_heap + (((int32_t) (obj) << 12) >> 12)))[1]) = oo_last_id;
  oo_last_id += 2;
  return obj;
}
# 10 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 1



# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 2


mlsize_t string_length(value s) {
  mlsize_t temp;
  temp = ((((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (s) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (s) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (s) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF))) << 2) - 1;
  return temp - ((0 || (((uint8_t) ((uint32_t) (s) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (s) << 12) >> 12))))[temp]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (s) & 0x000FFFFF))))[temp]));
}

value create_bytes(mlsize_t str_len) {
  value res;
  mlsize_t blk_wlen = ((str_len) >> 2) + 1;
  mlsize_t blk_blen = ((blk_wlen) << 2);
  do { if (heap_ptr + (blk_wlen) + 1 > heap_end) { gc(); if (heap_ptr + (blk_wlen) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((252))) << 24) | (((uvalue) ((blk_wlen))) << 2) | ((uvalue) (0)))); heap_ptr ++; (res) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (blk_wlen); } while(0);
  (((value *) ((char *) ocaml_ram_heap + (((int32_t) (res) << 12) >> 12)))[blk_wlen - 1]) = 0;
  (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (res) << 12) >> 12))))[blk_blen - 1]) = blk_blen - str_len - 1;
  return res;
}

value copy_bytes(const char *str) {
  mlsize_t str_len = strlen(str);
  value res = create_bytes(str_len);
  memcpy(((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (res) << 12) >> 12)))), str, str_len);
  return res;
}

value caml_create_bytes(value ml_len) {
  return create_bytes(((int32_t) ((value) (ml_len) >> 1)));
}

value caml_ml_string_length(value s) {
  return ((value) (((uint32_t) (int32_t) (string_length(s)) << 1) | 1));
}

value caml_ml_bytes_length(value b) {
  return caml_ml_string_length(b);
}

value caml_blit_string(value ml_s, value ml_sofs, value ml_b, value ml_bofs, value ml_len) {
  mlsize_t sofs = ((int32_t) ((value) (ml_sofs) >> 1));
  mlsize_t bofs = ((int32_t) ((value) (ml_bofs) >> 1));
  mlsize_t len = ((int32_t) ((value) (ml_len) >> 1));
  mlsize_t i;
  
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 (static_cast <bool> (
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 (((uint8_t) (ml_b) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (ml_b) >> 22) == 0x01FF)
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 ) ? void (0) : __assert_fail (
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 "Is_block(ml_b)"
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c", 47, __extension__ __PRETTY_FUNCTION__))
# 47 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
                       ;
  
# 48 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 (static_cast <bool> (
# 48 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 (0 || (((uint8_t) ((uint32_t) (ml_b) >> 16)) & 0x20) == 0x00)
# 48 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 ) ? void (0) : __assert_fail (
# 48 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 "Is_in_ram(ml_b)"
# 48 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c", 48, __extension__ __PRETTY_FUNCTION__))
# 48 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
                        ;
  for (i = 0; i < len; i ++) {
    (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (ml_b) << 12) >> 12))))[bofs + i]) = ((0 || (((uint8_t) ((uint32_t) (ml_s) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (ml_s) << 12) >> 12))))[sofs + i]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (ml_s) & 0x000FFFFF))))[sofs + i]));
  }
  return ((value) 0x1);
}

value caml_blit_bytes(value ml_s, value ml_sofs, value ml_b, value ml_bofs, value ml_len) {
  return caml_blit_string(ml_s, ml_sofs, ml_b, ml_bofs, ml_len);
}

value caml_fill_bytes(value ml_b, value ml_ofs, value ml_len, value ml_c) {
  mlsize_t ofs = ((int32_t) ((value) (ml_ofs) >> 1));
  mlsize_t len = ((int32_t) ((value) (ml_len) >> 1));
  uint8_t c = (uint8_t) ((int32_t) ((value) (ml_c) >> 1));
  mlsize_t i;
  
# 64 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 (static_cast <bool> (
# 64 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 (((uint8_t) (ml_b) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (ml_b) >> 22) == 0x01FF)
# 64 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 ) ? void (0) : __assert_fail (
# 64 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 "Is_block(ml_b)"
# 64 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c", 64, __extension__ __PRETTY_FUNCTION__))
# 64 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
                       ;
  
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 (static_cast <bool> (
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 (0 || (((uint8_t) ((uint32_t) (ml_b) >> 16)) & 0x20) == 0x00)
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 ) ? void (0) : __assert_fail (
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 "Is_in_ram(ml_b)"
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c", 65, __extension__ __PRETTY_FUNCTION__))
# 65 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
                        ;
  for (i = 0; i < len; i ++) {
    (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (ml_b) << 12) >> 12))))[ofs + i]) = c;
  }
  return ((value) 0x1);
}

value caml_string_equal(value s1, value s2) {
  mlsize_t sz1, sz2, i;
  if (s1 == s2) return ((value) 0x3);
  sz1 = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (s1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (s1) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (s1) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
  sz2 = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (s2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (s2) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (s2) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
  if (sz1 != sz2) return ((value) 0x1);
  for (i = 0; i < sz1; i ++) {
    value v1 = ((0 || (((uint8_t) ((uint32_t) (s1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (s1) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (s1) & 0x000FFFFF)))[i]));
    value v2 = ((0 || (((uint8_t) ((uint32_t) (s2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (s2) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (s2) & 0x000FFFFF)))[i]));
    if (v1 != v2) return ((value) 0x1);
  }
  return ((value) 0x3);
}

int string_compare(value s1, value s2) {
  mlsize_t sz1, sz2, sz, i;
  if (s1 == s2) return 0;
  sz1 = ((((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (s1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (s1) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (s1) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF))) << 2);
  sz2 = ((((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (s2) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (s2) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (s2) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF))) << 2);
  sz = sz1 < sz2 ? sz1 : sz2;
  for (i = 0; i < sz; i ++) {
    char c1 = ((0 || (((uint8_t) ((uint32_t) (s1) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (s1) << 12) >> 12))))[i]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (s1) & 0x000FFFFF))))[i]));
    char c2 = ((0 || (((uint8_t) ((uint32_t) (s2) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (s2) << 12) >> 12))))[i]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (s2) & 0x000FFFFF))))[i]));
    if (c1 < c2) return -1;
    if (c1 > c2) return 1;
  }
  if (sz1 == sz2) return 0;
  return sz1 < sz2 ? -1 : 1;
}

value caml_string_compare(value s1, value s2) {
  return ((value) (((uint32_t) (int32_t) (string_compare(s1, s2)) << 1) | 1));
}

value caml_bytes_compare(value b1, value b2) {
  return caml_string_compare(b1, b2);
}

value caml_bytes_equal(value s1, value s2) {
  return caml_string_equal(s1, s2);
}

value caml_string_notequal(value s1, value s2) {
  return ((uint8_t) (!(((uint8_t) (caml_string_equal(s1, s2)) & 2) != 0)) != 0 ? 0x3 : 0x1);
}

value caml_string_get(value s, value i) {
  mlsize_t idx = ((int32_t) ((value) (i) >> 1));
  mlsize_t len = string_length(s);
  if (idx >= len) caml_raise_index_out_of_bounds();
  return ((value) (((uint32_t) (int32_t) (((0 || (((uint8_t) ((uint32_t) (s) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (s) << 12) >> 12))))[idx]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (s) & 0x000FFFFF))))[idx]))) << 1) | 1));
}

value caml_bytes_get(value b, value i) {
  return caml_string_get(b, i);
}

value caml_bytes_set(value b, value i, value c) {
  
# 130 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 (static_cast <bool> (
# 130 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 (((uint8_t) (b) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (b) >> 22) == 0x01FF)
# 130 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 ) ? void (0) : __assert_fail (
# 130 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 "Is_block(b)"
# 130 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c", 130, __extension__ __PRETTY_FUNCTION__))
# 130 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
                    ;
  
# 131 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 (static_cast <bool> (
# 131 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 (0 || (((uint8_t) ((uint32_t) (b) >> 16)) & 0x20) == 0x00)
# 131 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 ) ? void (0) : __assert_fail (
# 131 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
 "Is_in_ram(b)"
# 131 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
 , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c", 131, __extension__ __PRETTY_FUNCTION__))
# 131 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
                     ;
  mlsize_t idx = ((int32_t) ((value) (i) >> 1));
  mlsize_t len = string_length(b);
  if (idx >= len) caml_raise_index_out_of_bounds();
  (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (b) << 12) >> 12))))[idx]) = ((int32_t) ((value) (c) >> 1));
  return ((value) 0x1);
}

value caml_string_of_int(value v) {
  char buf[13];



  snprintf(buf, sizeof(buf), "%" 
# 144 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c" 3 4
                                "d"
# 144 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/str.c"
                                      , ((int32_t) ((value) (v) >> 1)));



  return copy_bytes(buf);
}

value caml_string_of_float(value v) {
  char buf[13];
  snprintf(buf, sizeof(buf), "%.3lg", (double) (float_of_value(v)));
  return copy_bytes(buf);
}

value caml_string_of_bytes(value v){
  return v;
}

value caml_bytes_of_string(value v){
  return v;
}
# 11 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/sys.c" 1
value caml_sys_const_big_endian(value unit) {
  return ((value) 0x1);
}

value caml_sys_const_word_size(value unit) {
  return ((value) (((uint32_t) (int32_t) (sizeof(value) << 3) << 1) | 1));
}

value caml_sys_const_int_size(value unit) {
  return ((value) (((uint32_t) (int32_t) ((sizeof(value) << 3) - 1) << 1) | 1));
}

value caml_sys_const_max_wosize(value unit) {
  return ((value) (((uint32_t) (int32_t) (((uvalue) 1 << 22) - 1) << 1) | 1));
}
# 12 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/stack.c" 1

value caml_ensure_stack_capacity(value required_space)
{

  return ((value) 0x1);
}
# 13 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 1



# 1 "/usr/include/c++/7/stdlib.h" 1 3
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 2


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 8 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 2
# 23 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
code_t pc;
value *sp;
value trapSp;
uint8_t extra_args;

 extern void * const ocaml_primitives[];




static inline void *get_primitive(uint8_t prim_ind) {
  return do_get_primitive(ocaml_primitives, prim_ind);
}

static inline value read_flash_global_data_1B(uint8_t glob_ind) {
  return do_read_flash_data_1B(ocaml_flash_global_data, glob_ind);
}

static inline value read_flash_global_data_2B(uint16_t glob_ind) {
  return do_read_flash_data_2B(ocaml_flash_global_data, glob_ind);
}

static inline char read_byte(void) {
  char c = do_read_byte(ocaml_bytecode, pc);
  pc ++;
  return c;
}

static inline opcode_t read_opcode(void) {
  return (opcode_t) read_byte();
}

static inline uint8_t read_uint8(void) {
  return (uint8_t) read_byte();
}

static inline int8_t read_int8(void) {
  return (int8_t) read_byte();
}

static inline uint16_t read_uint16(void) {
  uint8_t n1 = read_uint8();
  uint8_t n0 = read_uint8();
  return ((uint16_t) n1 << 8) | n0;
}

static inline int16_t read_int16(void) {
  return (int16_t) read_uint16();
}

static inline uint32_t read_uint32(void) {
  uint8_t n3 = read_uint8();
  uint8_t n2 = read_uint8();
  uint8_t n1 = read_uint8();
  uint8_t n0 = read_uint8();
  return ((uint32_t) n3 << 24) | ((uint32_t) n2 << 16) | ((uint32_t) n1 << 8) | n0;
}

static inline int32_t read_int32(void) {
  return (int32_t) read_uint32();
}

static inline uint64_t read_uint64(void) {
  uint8_t n7 = read_uint8();
  uint8_t n6 = read_uint8();
  uint8_t n5 = read_uint8();
  uint8_t n4 = read_uint8();
  uint8_t n3 = read_uint8();
  uint8_t n2 = read_uint8();
  uint8_t n1 = read_uint8();
  uint8_t n0 = read_uint8();
  return ((uint64_t) n7 << 56) | ((uint64_t) n6 << 48) | ((uint64_t) n5 << 40) | ((uint64_t) n4 << 32) | ((uint64_t) n3 << 24) | ((uint64_t) n2 << 16) | ((uint64_t) n1 << 8) | n0;
}

static inline int64_t read_int64(void) {
  return (int64_t) read_uint64();
}

static inline code_t read_ptr_1B(void) {
  int8_t ofs = read_int8();
  return pc - 2 + ofs;
}

static inline code_t read_ptr_2B(void) {
  int16_t ofs = read_int16();
  return pc - 3 + ofs;
}

static inline code_t read_ptr_4B(void) {
  int32_t ofs = read_int32();
  return pc - 5 + ofs;
}




static inline value peek(int n) {
  return sp[n];
}

static inline void push(value x) {
  if(sp <= ocaml_stack) {
    caml_raise_stack_overflow();
  } else {
    *--sp = x;
  }
}

static inline value pop(void) {
  return *(sp ++);
}

static inline void pop_n(int n) {
  sp += n;
}




static inline void copy_flash_to_ram(void *ram_ptr, const void *flash_ptr, uint16_t size) {
  uint16_t ind = 0;
  for (ind = 0; ind < size; ind ++) {
    uint8_t byte = do_read_byte_from_flash(flash_ptr, ind);
    ((uint8_t *) ram_ptr)[ind] = byte;
  }
}

static inline void init_stack(void) {
  sp = ocaml_stack + 200 - 3;
  copy_flash_to_ram(sp, ocaml_initial_stack, 3 * sizeof(value));
}

static inline void init_global_data(void) {

  uint16_t ind = 0;
  for (ind = 0; ind < 0; ind ++) {
    ocaml_ram_global_data[ind] = ((value) 0x1);
  }

}

static inline void init_static_heap(void) {
  copy_flash_to_ram(ocaml_ram_heap, ocaml_initial_static_heap, 0 * sizeof(value));
}

static inline void interp_init(void) {
  init_stack();
  init_global_data();
  init_static_heap();
  trapSp = ((value) (((uint32_t) (int32_t) (-1) << 1) | 1));
  env = ((value) 0x1);
  extra_args = 0;
  pc = 0;
}




static inline void interp(void) {

  int opcode;

  if (
# 185 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     _setjmp (
# 185 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
     caml_exception_jmp_buf
# 185 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     )
# 185 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
                                   ) {
    goto ocaml_raise;
  }

  while (1) {
# 208 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    
# 208 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
   (static_cast <bool> (
# 208 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
   pc >= 0 && pc < 265
# 208 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
   ) ? void (0) : __assert_fail (
# 208 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
   "pc >= 0 && pc < OCAML_BYTECODE_BSIZE"
# 208 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
   , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c", 208, __extension__ __PRETTY_FUNCTION__))
# 208 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
                                               ;
    opcode = read_opcode();
    switch(opcode){

    case 0 : {
      ;
      acc = peek(0);
      break;
    }



    case 1 : {
      ;
      acc = peek(1);
      break;
    }



    case 2 : {
      ;
      acc = peek(2);
      break;
    }
# 292 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 3 : {
      ;
      push(acc);
      acc = peek(1);
      break;
    }



    case 4 : {
      ;
      push(acc);
      acc = peek(2);
      break;
    }



    case 5 : {
      ;
      push(acc);
      acc = peek(3);
      break;
    }



    case 6 : {
      ;
      push(acc);
      acc = peek(4);
      break;
    }



    case 7 : {
      ;
      push(acc);
      acc = peek(5);
      break;
    }
# 364 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 8 : {
      ;
      pop_n(read_uint8());
      break;
    }
# 506 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 9 : {
      ;
      
# 508 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     (static_cast <bool> (
# 508 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
     (((uint8_t) (acc) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (acc) >> 22) == 0x01FF)
# 508 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     ) ? void (0) : __assert_fail (
# 508 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
     "Is_block(acc)"
# 508 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c", 508, __extension__ __PRETTY_FUNCTION__))
# 508 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
                          ;
      
# 509 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     (static_cast <bool> (
# 509 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
     ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[-1]))) >> 24)) == 247 || ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[-1]))) >> 24)) == 249
# 509 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     ) ? void (0) : __assert_fail (
# 509 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
     "Tag_val(acc) == Closure_tag || Tag_val(acc) == Infix_tag"
# 509 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c", 509, __extension__ __PRETTY_FUNCTION__))
# 509 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
                                                                     ;
      value arg1 = pop();
      push(((value) (((uint32_t) (int32_t) (extra_args) << 1) | 1)));
      push(env);
      push(((value) (((uint32_t) (pc) << 1) | 0x80000001)));
      push(arg1);
      pc = (((uint32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) >> 1) & 0x3FFFFFFF);
      env = acc;
      extra_args = 0;
      break;
    }



    case 10 : {
      ;
      value arg1 = pop();
      value arg2 = pop();
      push(((value) (((uint32_t) (int32_t) (extra_args) << 1) | 1)));
      push(env);
      push(((value) (((uint32_t) (pc) << 1) | 0x80000001)));
      push(arg2);
      push(arg1);
      pc = (((uint32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) >> 1) & 0x3FFFFFFF);
      env = acc;
      extra_args = 1;
      break;
    }
# 620 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 11 : {
      ;
      uint8_t n = read_uint8();
      pop_n(n);
      if (extra_args > 0){
        extra_args --;
        pc = (((uint32_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[0]))) >> 1) & 0x3FFFFFFF);
        env = acc;
      } else {
        pc = (((uint32_t) (pop()) >> 1) & 0x3FFFFFFF);
        env = pop();
        extra_args = ((int32_t) ((value) (pop()) >> 1));
      }
      break;
    }



    case 12 : {
      ;
      uint8_t nargs = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (env) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (env) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (env) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF)) - 2;
      uint8_t i;
      sp -= nargs;
      if (sp < ocaml_stack) {
        sp += nargs;
        caml_raise_stack_overflow();
      }
      for (i = 0; i < nargs; i ++) sp[i] = ((0 || (((uint8_t) ((uint32_t) (env) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (env) << 12) >> 12)))[i + 2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (env) & 0x000FFFFF)))[i + 2]));
      env = ((0 || (((uint8_t) ((uint32_t) (env) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (env) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (env) & 0x000FFFFF)))[1]));
      extra_args += nargs;
      break;
    }



    case 13 : {
      ;
      uint8_t n = read_uint8();
      uint8_t i;
      if (extra_args >= n){
        extra_args -= n;
      } else {
        do { if (heap_ptr + (extra_args + 3) + 1 > heap_end) { gc(); if (heap_ptr + (extra_args + 3) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((247))) << 24) | (((uvalue) ((extra_args + 3))) << 2) | ((uvalue) (0)))); heap_ptr ++; (acc) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (extra_args + 3); } while(0);
        (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[0]) = ((value) (((uint32_t) (pc - 3) << 1) | 0x80000001));
        (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[1]) = env;
        for (i = 0 ; i <= extra_args; i ++) {
          (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[i + 2]) = pop();
        }
        pc = (((uint32_t) (pop()) >> 1) & 0x3FFFFFFF);
        env = pop();
        extra_args = ((int32_t) ((value) (pop()) >> 1));
      }
      break;
    }
# 926 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 14 : {
      ;
      push(acc);

    }





      {
        ;
        acc = read_flash_global_data_1B(read_uint8());
        break;
      }
# 1329 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 15 : {
      ;
      pc = read_ptr_1B();
      break;
    }



    case 16 : {
      ;
      pc = read_ptr_2B();
      break;
    }
# 1353 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 17 : {
      ;
      if (acc != ((value) 0x1)) {
        pc = read_ptr_1B();
      } else {
        pc += 1;
      }
      break;
    }
# 1389 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 18 : {
      ;
      if (acc == ((value) 0x1)){
        pc = read_ptr_1B();
      } else {
        pc += 1;
      }
      break;
    }
# 1425 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 19 : {
      ;
      if ((((uint8_t) (acc) & 0x1) == 0x01)){
        uint8_t ofs = ((int32_t) ((value) (acc) >> 1)) + 2;
        pc += ofs;
        pc = read_ptr_1B() - ofs;
      } else {
        tag_t idx = ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (acc) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (acc) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (acc) & 0x000FFFFF)))[-1]))) >> 24));
        uint16_t n = read_uint8();
        uint16_t ofs = n + idx + 1;
        pc += ofs;
        pc = read_ptr_1B() - ofs - 1;
      }
      break;
    }
# 1536 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    {
      ocaml_raise:
      ;
      if (trapSp == ((value) (((uint32_t) (int32_t) (-1) << 1) | 1))) {
        uncaught_exception(acc);
        return;
      } else {
        sp = ocaml_stack + ((int32_t) ((value) (trapSp) >> 1));
        pc = (((uint32_t) (pop()) >> 1) & 0x3FFFFFFF);
        trapSp = pop();
        env = pop();
        extra_args = ((int32_t) ((value) (pop()) >> 1));
      }
      break;
    }


    case 20 : {
      ;
      break;
    }



    case 21 : {
      ;
      acc = ((value (*)(value)) (get_primitive(read_uint8())))(acc);
      break;
    }



    case 22 : {
      ;
      acc = ((value (*)(value, value)) (get_primitive(read_uint8())))(acc, sp[0]);
      pop_n(1);
      break;
    }
# 1623 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 23 :


    {
      ;
      acc = ((value) (((uint32_t) (int32_t) (0) << 1) | 1));
      break;
    }
# 1641 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 24 :


    {
      ;
      acc = ((value) (((uint32_t) (int32_t) (1) << 1) | 1));
      break;
    }
# 1659 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 25 :


    {
      ;
      acc = ((value) (((uint32_t) (int32_t) (2) << 1) | 1));
      break;
    }
# 1677 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 26 :


    {
      ;
      acc = ((value) (((uint32_t) (int32_t) (3) << 1) | 1));
      break;
    }



    case 29 : {
      ;
      push(acc);

    }


    case 27 :


    {
      ;
      acc = ((value) (((uint32_t) (int32_t) (read_int8()) << 1) | 1));
      break;
    }
# 1713 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 28 :


    {
      ;
      acc = ((value) (((uint32_t) (int32_t) (read_int16()) << 1) | 1));
      break;
    }
# 1896 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 30 : {
      ;
      acc = (acc <= pop()) ? ((value) (((uint32_t) (int32_t) (1) << 1) | 1)) : ((value) (((uint32_t) (int32_t) (0) << 1) | 1));
      break;
    }
# 2155 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 31 : {
      ;
      if (((value) (((uint32_t) (int32_t) (read_int8()) << 1) | 1)) > acc) {
        pc = read_ptr_1B() - 1;
      } else {
        pc += 1;
      }
      break;
    }
# 2330 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
    case 32 : {
      ;
      return;
    }


    default:




      
# 2341 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     (static_cast <bool> (
# 2341 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
     0
# 2341 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     ) ? void (0) : __assert_fail (
# 2341 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
     "0"
# 2341 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c" 3 4
     , "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c", 2341, __extension__ __PRETTY_FUNCTION__))
# 2341 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/interp.c"
              ;
      break;
    }
  }
  return;
}




int main(int argc, const char **argv) {
  device_init(argv);

  interp_init();
  gc_init();
  interp();

  device_finish();

  return 0;
}
# 14 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/gc.c" 1



uint32_t gc_count = 0;

value caml_gc_run(value unit) {
  gc();
  return ((value) 0x1);
}

value caml_gc_collections(value unit) {
  return ((value) (((uint32_t) (int32_t) (gc_count) << 1) | 1));
}

value caml_gc_live_words(value unit) {

  return ((value) (((uint32_t) (int32_t) (200 - (heap_end - heap_ptr)) << 1) | 1));



}

value caml_gc_free_words(value unit) {
  return ((value) (((uint32_t) (int32_t) (heap_end - heap_ptr) << 1) | 1));
}

value caml_gc_used_stack_size(value unit) {
  return ((value) (((uint32_t) (int32_t) (ocaml_stack + 200 - sp) << 1) | 1));
}

value caml_gc_available_stack_size(value unit) {
  return ((value) (((uint32_t) (int32_t) (sp - ocaml_stack) << 1) | 1));
}
# 15 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/hash.c" 1

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/hash.c" 2

static uint32_t hash(uint32_t *count, uint32_t *limit, uint32_t h, value v) {
  if (*count <= 1 || *limit == 0) return h;
  (*count) --;
  if ((((uint8_t) (v) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v) >> 22) == 0x01FF)) {
    tag_t tag = ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[-1]))) >> 24));
    mlsize_t sz = ((mlsize_t) (((header_t) (((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[-1]))) >> 2) & 0x003FFFFF));
    h = h * 223 + ((tag_t) ((header_t) (((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[-1]))) >> 24));

    if (tag < 251) {
      mlsize_t i;
      for (i = 0; i < sz; i ++) {
        h = hash(count, limit, h, ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[i])));
        if (*count == 0 || *limit == 0) return h;
      }
    } else {
      mlsize_t i;
      for (i = 0; i < sz; i ++) {
        h = h * 223 + ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[i]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[i]));
      }
      if (*limit < sz) *limit = 0;
      else *limit -= sz;
    }
    return h;
  } else {
    (*limit) --;
    return h * 223 + (uint32_t) v;
  }
}

value caml_hash(value ml_count, value ml_limit, value seed, value v) {
  uint32_t count = ((int32_t) ((value) (ml_count) >> 1));
  uint32_t limit = ((int32_t) ((value) (ml_limit) >> 1));
  return ((value) (((uint32_t) (int32_t) (hash(&count, &limit, ((int32_t) ((value) (seed) >> 1)), v) & 0x3FFFFFFF) << 1) | 1));
}
# 16 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int32.c" 1


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int32.c" 2
# 16 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int32.c"
static value value_of_int32(int32_t n) {
# 29 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int32.c"
  if (-0x40000000 <= n && n <= 0x3FFFFFFF) {
    return ((value) (((uint32_t) (int32_t) (n) << 1) | 1));
  } else {
    value result;
    do { if (heap_ptr + (2) + 1 > heap_end) { gc(); if (heap_ptr + (2) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((255))) << 24) | (((uvalue) ((2))) << 2) | ((uvalue) (0)))); heap_ptr ++; (result) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (2); } while(0);
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (result) << 12) >> 12)))[0]) = 132;
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (result) << 12) >> 12)))[1]) = (value) n;
    return result;
  }



}

int8_t int32_compare(value v0, value v1) {
  int32_t n0 = ((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1])));
  int32_t n1 = ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1])));
  if (n0 < n1) return -1;
  if (n0 > n1) return 1;
  return 0;
}

value caml_int32_compare(value v0, value v1) {
  return ((value) (((uint32_t) (int32_t) (int32_compare(v0, v1)) << 1) | 1));
}

value caml_int32_neg(value v) {
  return value_of_int32(-((((uint8_t) (v) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[1]))));
}

value caml_int32_add(value v0, value v1) {
  return value_of_int32(((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) + ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))));
}

value caml_int32_sub(value v0, value v1) {
  return value_of_int32(((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) - ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))));
}

value caml_int32_mul(value v0, value v1) {
  return value_of_int32(((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) * ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))));
}

value caml_int32_div(value v0, value v1) {
  int32_t n0 = ((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1])));
  int32_t n1 = ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1])));
  if (n1 == 0) caml_raise_division_by_zero();
  return value_of_int32(n0 / n1);
}

value caml_int32_mod(value v0, value v1) {
  int32_t n0 = ((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1])));
  int32_t n1 = ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1])));
  if (n1 == 0) caml_raise_division_by_zero();
  return value_of_int32(n0 % n1);
}

value caml_int32_and(value v0, value v1) {
  return value_of_int32(((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) & ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))));
}

value caml_int32_or(value v0, value v1) {
  return value_of_int32(((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))));
}

value caml_int32_xor(value v0, value v1) {
  return value_of_int32(((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) ^ ((((uint8_t) (v1) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v1) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))));
}

value caml_int32_lsl(value v0, value v1) {
  return value_of_int32(((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) << ((int32_t) ((value) (v1) >> 1)));
}

value caml_int32_asr(value v0, value v1) {
  return value_of_int32(((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) >> ((int32_t) ((value) (v1) >> 1)));
}

value caml_int32_lsr(value v0, value v1) {
  return value_of_int32((uint32_t) ((((uint8_t) (v0) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v0) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) >> ((int32_t) ((value) (v1) >> 1)));
}

value caml_int32_of_int(value v) {
  return v;
}

value caml_int32_to_int(value v) {
  return ((value) (((uint32_t) (int32_t) (((((uint8_t) (v) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[1])))) << 1) | 1));
}

value caml_int32_of_float(value v) {
  return value_of_int32((int32_t) (float_of_value(v)));
}

value caml_int32_to_float(value v) {
  return (value_of_float((float) ((((uint8_t) (v) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[1])))));
}

value caml_string_of_int32(value v) {
  char buf[13];
  snprintf(buf, sizeof(buf), "%" 
# 127 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int32.c" 3 4
                                "d"
# 127 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int32.c"
                                      , ((((uint8_t) (v) & 0x1) == 0x01) ? (int32_t) ((int32_t) ((value) (v) >> 1)) : (int32_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[1]))));
  return copy_bytes(buf);
}

value caml_int32_of_string(value s) {
  caml_raise_failure("Int32.of_string not yet implemented");
  return ((value) 0x1);
}
# 17 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int64.c" 1


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int64.c" 2




static value value_of_int64(int64_t n) {
# 23 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int64.c"
  if (-0x40000000 <= n && n <= 0x3FFFFFFF) {
    return ((value) (((uint32_t) (int32_t) (n) << 1) | 1));
  } else {
    value result;
    do { if (heap_ptr + (3) + 1 > heap_end) { gc(); if (heap_ptr + (3) + 1 > heap_end) { caml_raise_out_of_memory(); } } *heap_ptr = ((value) ((((uvalue) ((255))) << 24) | (((uvalue) ((3))) << 2) | ((uvalue) (0)))); heap_ptr ++; (result) = ((value) ((char *) (heap_ptr) - (char *) ocaml_ram_heap) | (value) 0x7FC00000); heap_ptr += (3); } while(0);
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (result) << 12) >> 12)))[0]) = 164;
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (result) << 12) >> 12)))[1]) = (value) ((n >> 32) & 0xFFFFFFFF);
    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (result) << 12) >> 12)))[2]) = (value) (n & 0xFFFFFFFFFF);
    return result;
  }
# 44 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/int64.c"
}

int8_t int64_compare(value v0, value v1) {
  int64_t n0 = ((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32));
  int64_t n1 = ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32));
  if (n0 < n1) return -1;
  if (n0 > n1) return 1;
  return 0;
}

value caml_int64_compare(value v0, value v1) {
  return ((value) (((uint32_t) (int32_t) (int64_compare(v0, v1)) << 1) | 1));
}

value caml_int64_neg(value v) {
  return value_of_int64(-((((uint8_t) (v) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[2])) << 32)));
}

value caml_int64_add(value v0, value v1) {
  return value_of_int64(((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) + ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32)));
}

value caml_int64_sub(value v0, value v1) {
  return value_of_int64(((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) - ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32)));
}

value caml_int64_mul(value v0, value v1) {
  return value_of_int64(((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) * ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32)));
}

value caml_int64_div(value v0, value v1) {
  int64_t n0 = ((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32));
  int64_t n1 = ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32));
  if (n1 == 0) caml_raise_division_by_zero();
  return value_of_int64(n0 / n1);
}

value caml_int64_mod(value v0, value v1) {
  int64_t n0 = ((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32));
  int64_t n1 = ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32));
  if (n1 == 0) caml_raise_division_by_zero();
  return value_of_int64(n0 % n1);
}

value caml_int64_and(value v0, value v1) {
  return value_of_int64(((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) & ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32)));
}

value caml_int64_or(value v0, value v1) {
  return value_of_int64(((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) | ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32)));
}

value caml_int64_xor(value v0, value v1) {
  return value_of_int64(((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) ^ ((((uint8_t) (v1) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v1) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v1) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v1) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v1) & 0x000FFFFF)))[2])) << 32)));
}

value caml_int64_lsl(value v0, value v1) {
  return value_of_int64(((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) << ((int32_t) ((value) (v1) >> 1)));
}

value caml_int64_asr(value v0, value v1) {
  return value_of_int64(((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) >> ((int32_t) ((value) (v1) >> 1)));
}

value caml_int64_lsr(value v0, value v1) {
  return value_of_int64((uint64_t) ((((uint8_t) (v0) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v0) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v0) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v0) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v0) & 0x000FFFFF)))[2])) << 32)) >> ((int32_t) ((value) (v1) >> 1)));
}

value caml_int64_of_int(value v) {
  return v;
}

value caml_int64_to_int(value v) {
  return ((value) (((uint32_t) (int32_t) (((((uint8_t) (v) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[2])) << 32))) << 1) | 1));
}

value caml_int64_of_float(value v) {
  return value_of_int64((int64_t) (float_of_value(v)));
}

value caml_int64_to_float(value v) {
  return (value_of_float((float) ((((uint8_t) (v) & 0x1) == 0x01) ? (int64_t) ((int32_t) ((value) (v) >> 1)) : ((int64_t) (uint32_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[1]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[1]))) | ((int64_t) ((0 || (((uint8_t) ((uint32_t) (v) >> 16)) & 0x20) == 0x00) ? (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[2]) : (((value *) ((char *) ocaml_flash_heap + ((int32_t) (v) & 0x000FFFFF)))[2])) << 32))));
}

value caml_string_of_int64(value v) {
  char buf[26];
  format_int64(buf, sizeof(buf), v);
  return copy_bytes(buf);
}

value caml_int64_of_string(value s) {
  caml_raise_failure("Int64.of_string not yet implemented");
  return ((value) 0x1);
}
# 18 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/mark-and-compact.c" 1

# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/values.h" 2
# 3 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/mark-and-compact.c" 2
# 12 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/mark-and-compact.c"
value *heap_ptr;
value *heap_end;

void gc_init(void) {
  heap_ptr = ocaml_ram_heap + 0;
  heap_end = ocaml_ram_heap + 0 + 200;
}
# 31 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/mark-and-compact.c"
static void mark_block(value *p) {
  value v = *p;
  while (v != (((value) ((char *) (ocaml_ram_heap) - (char *) ocaml_ram_heap) | (value) 0x7FC00000) | 2)) {
    if ((((uint8_t) (v) & 0x3) == 0x02 && (uint16_t) ((uint32_t) (v) >> 22) == 0x01FF)) {
      value *old_p = ((value *) ((char *) ocaml_ram_heap + (((int32_t) (v ^ 2) << 12) >> 12)));
      header_t old_h = *old_p;
      if (((color_t) ((header_t) (old_h) & 0x3)) == 1) {
        value *inf_p = p + ((mlsize_t) (((header_t) (old_h) >> 2) & 0x003FFFFF));
        *p = *inf_p ^ 1;
        *inf_p = old_h;
        *old_p = ((value) ((char *) (inf_p + 1) - (char *) ocaml_ram_heap) | (value) 0x7FC00000);
        p = old_p - 1;
      } else {
        *p = old_h;
        *old_p = ((value) ((char *) (p + 1) - (char *) ocaml_ram_heap) | (value) 0x7FC00000);
        p = old_p - 1;
      }

    } else if ((((uint8_t) (v) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v) >> 20) == 0x07FC)) {
      header_t h = (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]);
      tag_t tag = ((tag_t) ((header_t) (h) >> 24));
      if (tag == 249) {
        value *pstart = ((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12))) - ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) - 1;
        header_t hstart = *pstart;
        if (((color_t) ((header_t) (hstart) & 0x3)) == 0) {
          *p = h;
          (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) = hstart | 3;
          *pstart = ((value) ((char *) (p) - (char *) ocaml_ram_heap) | (value) 0x7FC00000) | 2;
          p = pstart + ((mlsize_t) (((header_t) (hstart) >> 2) & 0x003FFFFF));
        } else {
          p --;
        }
      } else if (((color_t) ((header_t) (h) & 0x3)) == 0) {
        if (tag < 251) {
          *p = h | 2;
          (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) = ((value) ((char *) (p) - (char *) ocaml_ram_heap) | (value) 0x7FC00000) | 2;
          p = &(((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) - 1]);
        } else {
          (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) = h | 2;
          p --;
        }
      } else {
        p --;
      }

    } else {
      p --;
    }

    v = *p;
  }
}




static void mark_root(value v) {
  if ((((uint8_t) (v) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v) >> 20) == 0x07FC)) {
    header_t h = (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]);
    if (((color_t) ((header_t) (h) & 0x3)) == 0) {
      if (((tag_t) ((header_t) (h) >> 24)) < 251) {
        (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) = (((value) ((char *) (ocaml_ram_heap) - (char *) ocaml_ram_heap) | (value) 0x7FC00000) | 2);
        mark_block(&(((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) - 1]));
      }
      (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) = h | 2;
    }
  }
}




static void mark_roots(void) {
  value *p, *end;

  mark_root(acc);
  mark_root(env);

  end = ocaml_stack + 200;
  for (p = sp; p < end; p ++) {
    mark_root(*p);
  }

  end = ocaml_ram_global_data + 0;
  for (p = ocaml_ram_global_data; p < end; p ++) {
    mark_root(*p);
  }

  p = ocaml_ram_heap;
  end = ocaml_ram_heap + 0;
  while (p < end) {
    header_t h = *p;
    mlsize_t sz = ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF));
    if (((tag_t) ((header_t) (h) >> 24)) < 251) {
      p ++;
      while (sz > 0) {
        mark_root(*p);
        p ++;
        sz --;
      }
    } else {
      p += sz + 1;
    }
  }
}







static void wipe_dead_blocks() {
  value *p = ocaml_ram_heap + 0;
  header_t h = *p;
  while (p < heap_ptr) {
    if (((color_t) ((header_t) (h) & 0x3)) == 0) {
      mlsize_t size = ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF));
      value *start = p;
      p += size + 1;
      while (p < heap_ptr && ((color_t) ((header_t) ((h = *p)) & 0x3)) == 0) {
        p += ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) + 1;
        if ((mlsize_t) (p - start - 1) >=
            (mlsize_t) 1 << 22) {
          p -= ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) + 1;
          break;
        }
      }
      *start = ((value) ((((uvalue) (252)) << 24) | (((uvalue) (p - start - 1)) << 2) | ((uvalue) (0))));
    } else {
      *p = h ^ 2;
      p += ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) + 1;
      h = *p;
    }
  }
}





static void reverse_pointer(value *p) {
  value v = *p;
  if ((((uint8_t) (v) & 0x3) == 0x00 && (uint16_t) ((uint32_t) (v) >> 20) == 0x07FC)) {

    *p = (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) | 1;

    (((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12)))[-1]) = ((value) ((char *) (p) - (char *) ocaml_ram_heap) | (value) 0x7FC00000) | 2;
  }
}




static void reverse_root_pointers(void) {
  value *p, *end;

  reverse_pointer(&acc);
  reverse_pointer(&env);

  end = ocaml_stack + 200;
  for (p = sp; p < end; p ++) {
    reverse_pointer(p);
  }

  end = ocaml_ram_global_data + 0;
  for (p = ocaml_ram_global_data; p < end; p ++) {
    reverse_pointer(p);
  }

  p = ocaml_ram_heap;
  end = ocaml_ram_heap + 0;
  while (p < end) {
    header_t h = *p;
    mlsize_t sz = ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF));
    if (((tag_t) ((header_t) (h) >> 24)) < 251) {
      p ++;
      while (sz > 0) {
        reverse_pointer(p);
        p ++;
        sz --;
      }
    } else {
      p += sz + 1;
    }
  }
}




static void reverse_heap_pointers(void) {
  value *p = ocaml_ram_heap + 0;
  while (p < heap_ptr) {
    header_t h = *p;
    while ((((color_t) ((header_t) (h) & 0x3)) & 2) == 2) {
      h = *((value *) ((char *) ocaml_ram_heap + (((int32_t) (h & ~3) << 12) >> 12)));
    }
    if (((tag_t) ((header_t) (h) >> 24)) < 251) {
      value *end = p + ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) + 1;
      for (p ++; p < end; p ++) {
        reverse_pointer(p);
      }
    } else {
      p += ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) + 1;
    }
  }
}







static void update_pointers(void) {
  value *p = ocaml_ram_heap + 0;
  value *alloc_pos = p;
  while (p < heap_ptr) {
    value v = *p;

    if (((color_t) ((header_t) (v) & 0x3)) == 2) {
      do {
        v ^= 2;
        value next = *((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12))) & ~1;
        *((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12))) = ((value) ((char *) (alloc_pos + 1) - (char *) ocaml_ram_heap) | (value) 0x7FC00000);
        v = next;
      } while (((color_t) ((header_t) (v) & 0x3)) == 2);
      *p = v;
      mlsize_t size = ((mlsize_t) (((header_t) (v) >> 2) & 0x003FFFFF)) + 1;
      if (((tag_t) ((header_t) (v) >> 24)) == 247) {

        value *end = p + size;
        mlsize_t i = 2;
        for (p ++; p < end; p ++, i ++) {
          value v = *p;
          if (((color_t) ((header_t) (v) & 0x3)) == 2) {
            do {
              v ^= 2;
              value next = *((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12))) & ~1;
              *((value *) ((char *) ocaml_ram_heap + (((int32_t) (v) << 12) >> 12))) = ((value) ((char *) (alloc_pos + i) - (char *) ocaml_ram_heap) | (value) 0x7FC00000);
              v = next;
            } while (((color_t) ((header_t) (v) & 0x3)) == 2);
            *p = v | 1;
          }
        }
      } else {
        p += size;
      }
      alloc_pos += size;
    } else {
      *p = v | 2;
      p += ((mlsize_t) (((header_t) (v) >> 2) & 0x003FFFFF)) + 1;
    }
  }
}




static void compact_blocks(void) {
  value *p = ocaml_ram_heap + 0;
  value *alloc_pos = p;
  while (p < heap_ptr) {
    header_t h = *p;
    mlsize_t size = ((mlsize_t) (((header_t) (h) >> 2) & 0x003FFFFF)) + 1;
    if (((color_t) ((header_t) (h) & 0x3)) == 0) {
      memmove(alloc_pos, p, size * sizeof(value));
      alloc_pos += size;
    }
    p += size;
  }
  heap_ptr = alloc_pos;
}




void gc(void) {
  gc_count ++;
# 328 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/mark-and-compact.c"
  mark_roots();
  wipe_dead_blocks();
# 343 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/mark-and-compact.c"
  reverse_root_pointers();







  reverse_heap_pointers();






  update_pointers();







  compact_blocks();
# 381 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/mark-and-compact.c"
}
# 21 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2







# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/bindings.c" 1



# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/../vm/values.h" 1
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 1


# 1 "/usr/include/assert.h" 1 3 4
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/simul/arch-specific.h" 2
# 2 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/../vm/values.h" 2
# 5 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/bindings.c" 2


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/prims.h" 1
# 10 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/prims.h"
void pic32_set_bit(uint8_t reg, uint8_t bit);
void pic32_clear_bit(uint8_t reg, uint8_t bit);
bool pic32_read_bit(uint8_t reg, uint8_t bit);
void pic32_write_register(uint8_t reg, uint8_t val);
uint8_t pic32_read_register(uint8_t reg);
void pic32_delay(int ms);






void avr_set_bit(uint8_t reg, uint8_t bit);
void avr_clear_bit(uint8_t reg, uint8_t bit);
bool avr_read_bit(uint8_t reg, uint8_t bit);



void avr_adc_init();
uint16_t avr_analog_read(uint8_t);



void avr_serial_init();
void avr_serial_write(char val);
char avr_serial_read();



void avr_write_register(uint8_t reg, uint8_t val);
uint8_t avr_read_register(uint8_t reg);
int avr_random(int max);
void avr_delay(int ms);
int avr_millis();
# 8 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/bindings.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/../stdlib/random.h" 1






void random_init(int32_t n);
uint32_t random_bits(uint32_t bound);
bool random_bool(void);
# 9 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/bindings.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/../stdlib/trace.h" 1





void debug_trace_open(void);
void debug_trace_char(char c);
void debug_trace_close(void);
void debug_trace_int(long n);
# 10 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/bindings.c" 2







value caml_avr_set_bit(value reg, value bit) {
  avr_set_bit(((int32_t) ((value) (reg) >> 1)), ((int32_t) ((value) (bit) >> 1)));
  return ((value) 0x1);
}

value caml_avr_clear_bit(value reg, value bit) {
  avr_clear_bit(((int32_t) ((value) (reg) >> 1)), ((int32_t) ((value) (bit) >> 1)));
  return ((value) 0x1);
}

value caml_avr_read_bit(value reg, value bit) {
  return ((uint8_t) (avr_read_bit(((int32_t) ((value) (reg) >> 1)), ((int32_t) ((value) (bit) >> 1)))) != 0 ? 0x3 : 0x1);
}

value caml_avr_delay(value ms) {
  avr_delay(((int32_t) ((value) (ms) >> 1)));
  return ((value) 0x1);
}

value caml_avr_millis(value unit) {
  return ((value) (((uint32_t) (int32_t) (avr_millis()) << 1) | 1));
}



value caml_avr_write_register(value reg, value val) {
  avr_write_register(((int32_t) ((value) (reg) >> 1)), ((int32_t) ((value) (val) >> 1)));
  return ((value) 0x1);
}

value caml_avr_read_register(value reg) {
  return ((value) (((uint32_t) (int32_t) (avr_read_register(((int32_t) ((value) (reg) >> 1)))) << 1) | 1));
}



value caml_avr_adc_init(value unit){
  avr_adc_init();
  return ((value) 0x1);
}

value caml_avr_analog_read(value channel){
  return ((value) (((uint32_t) (int32_t) (avr_analog_read(((int32_t) ((value) (channel) >> 1)))) << 1) | 1));
}





value caml_avr_serial_init(value unit){
  avr_serial_init();
  return ((value) 0x1);
}

value caml_avr_serial_write(value val){
  avr_serial_write(((int32_t) ((value) (val) >> 1)));
  return ((value) 0x1);
}


value caml_avr_serial_read(value unit){
  return ((value) (((uint32_t) (int32_t) (avr_serial_read()) << 1) | 1));
}
# 123 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../prims/bindings.c"
value caml_random_init(value n) {
  random_init(((int32_t) ((value) (n) >> 1)));
  return ((value) 0x1);
}

value caml_random_bits(value bound) {
  return ((value) (((uint32_t) (int32_t) (random_bits((uint32_t) ((int32_t) ((value) (bound) >> 1)))) << 1) | 1));
}

value caml_random_bool(value unit) {
  return ((uint8_t) (random_bool()) != 0 ? 0x3 : 0x1);
}



value caml_unsafe_string_of_bytes(value b) {
  return b;
}

value caml_unsafe_bytes_of_string(value s) {
  return s;
}







value caml_debug_trace(value msg) {
  mlsize_t sz = string_length(msg);
  mlsize_t i;
  debug_trace_open();
  for (i = 0; i < sz; i ++) {
    debug_trace_char(((0 || (((uint8_t) ((uint32_t) (msg) >> 16)) & 0x20) == 0x00) ? (((uint8_t *) ((value *) ((char *) ocaml_ram_heap + (((int32_t) (msg) << 12) >> 12))))[i]) : (((uint8_t *) ((value *) ((char *) ocaml_flash_heap + ((int32_t) (msg) & 0x000FFFFF))))[i])));
  }
  debug_trace_close();
  return ((value) 0x1);
}

value caml_debug_tracei(value n) {
  debug_trace_int(((int32_t) ((value) (n) >> 1)));
  return ((value) 0x1);
}
# 29 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../stdlib/random.c" 1


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../stdlib/random.h" 1
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../stdlib/random.c" 2

static uint32_t random_n0 = 0x46FE2EC5;
static uint32_t random_n1 = 0x8E2A8B3C;
static uint32_t random_n2 = 0x48868F0D;

static void random_turn(void) {
  uint32_t sum = random_n0 + random_n2;
  random_n2 = random_n1;
  random_n1 = random_n0;
  random_n0 = sum;
}

void random_init(int32_t n) {
  random_n0 = (uint32_t) n ^ 0x4CC642b4;
  random_n1 = 0x07f8f8e7;
  random_n2 = 0x0b2044b6;
}

uint32_t random_bits(uint32_t bound) {
  uint32_t tmp;
  do {
    random_turn();
    tmp = random_n0 % bound;
  } while (random_n0 - tmp > 0x3FFFFFFF - bound + 1);
  return tmp;
}

bool random_bool(void) {
  random_turn();
  return random_n0 | 1;
}
# 30 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../stdlib/trace.c" 1


# 1 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../stdlib/trace.h" 1
# 4 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/../stdlib/trace.c" 2

void debug_trace_open(void) {
  printf("TRACE: ");
}

void debug_trace_char(char c) {
  printf("%c", c);
}

void debug_trace_close(void) {
  printf("\n");
}

void debug_trace_int(long i) {
  printf("TRACE: %ld\n", i);
}
# 30 "/home/adilla/Documents/VmMic/Tools/OMicroBPIC32/src/byterun/vm/runtime.c" 2
# 281 "test.c" 2

 void * const ocaml_primitives[3] = {
            (void *) &caml_avr_delay,
            (void *) &caml_avr_clear_bit,
            (void *) &caml_avr_set_bit,
};
